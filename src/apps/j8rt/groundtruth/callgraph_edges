java.util.stream.Streams$StreamBuilderImpl.build()Ljava/util/stream/Stream; -> java.util.stream.SpinedBuffer.spliterator()Ljava/util/Spliterator;
java.util.stream.Streams$StreamBuilderImpl.accept(Ljava/lang/Object;)V -> java.util.stream.SpinedBuffer.<init>()V
java.util.stream.Streams$StreamBuilderImpl.accept(Ljava/lang/Object;)V -> java.util.stream.SpinedBuffer.accept(Ljava/lang/Object;)V
java.util.stream.SpinedBuffer.<init>()V -> java.util.stream.AbstractSpinedBuffer.<init>()V
java.util.stream.SpinedBuffer.accept(Ljava/lang/Object;)V -> java.util.stream.SpinedBuffer.inflateSpine()V
java.util.stream.SpinedBuffer.accept(Ljava/lang/Object;)V -> java.util.stream.SpinedBuffer.increaseCapacity()V
java.util.stream.StreamOpFlag.fromCharacteristics(Ljava/util/Spliterator;)I -> java.util.stream.SpinedBuffer$1Splitr.characteristics()I
java.util.stream.AbstractSpinedBuffer.<init>()V -> java.lang.Object.<init>()V
java.util.stream.SpinedBuffer.increaseCapacity()V -> java.util.stream.SpinedBuffer.capacity()J
java.util.stream.SpinedBuffer.increaseCapacity()V -> java.util.stream.SpinedBuffer.ensureCapacity(J)V
java.util.stream.SpinedBuffer.ensureCapacity(J)V -> java.util.stream.SpinedBuffer.inflateSpine()V
java.util.stream.SpinedBuffer.ensureCapacity(J)V -> java.util.stream.SpinedBuffer.capacity()J
java.util.stream.SpinedBuffer.ensureCapacity(J)V -> java.util.Arrays.copyOf([Ljava/lang/Object;I)[Ljava/lang/Object;
java.util.stream.SpinedBuffer.ensureCapacity(J)V -> java.util.Arrays.copyOf([JI)[J
java.util.stream.SpinedBuffer.ensureCapacity(J)V -> java.util.stream.AbstractSpinedBuffer.chunkSize(I)I
java.util.stream.AbstractSpinedBuffer.chunkSize(I)I -> java.lang.Math.min(II)I
java.util.stream.SpinedBuffer.spliterator()Ljava/util/Spliterator; -> java.util.stream.SpinedBuffer$1Splitr.<init>(Ljava/util/stream/SpinedBuffer;IIII)V
java.util.stream.ReferencePipeline$Head.forEach(Ljava/util/function/Consumer;)V -> java.util.stream.SpinedBuffer$1Splitr.forEachRemaining(Ljava/util/function/Consumer;)V
java.util.stream.SpinedBuffer$1Splitr.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.stream.SpinedBuffer$1Splitr.<init>(Ljava/util/stream/SpinedBuffer;IIII)V -> java.lang.Object.<init>()V
java.util.stream.SpinedBuffer$1Splitr.<init>(Ljava/util/stream/SpinedBuffer;IIII)V -> java.lang.AssertionError.<init>()V
java.util.stream.SpinedBuffer$1Splitr.forEachRemaining(Ljava/util/function/Consumer;)V -> java.util.Objects.requireNonNull(Ljava/lang/Object;)Ljava/lang/Object;
java.util.stream.SpinedBuffer$1Splitr.forEachRemaining(Ljava/util/function/Consumer;)V -> java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Ljava/lang/Object;)V
java.util.stream.SpinedBuffer$1Splitr.forEachRemaining(Ljava/util/function/Consumer;)V -> java.util.stream.Nodes$FixedNodeBuilder.accept(Ljava/lang/Object;)V
java.util.stream.SpinedBuffer$1Splitr.forEachRemaining(Ljava/util/function/Consumer;)V -> java.util.stream.Nodes$SpinedNodeBuilder.accept(Ljava/lang/Object;)V
java.util.stream.ForEachOps$ForEachOrderedTask.<init>(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;Ljava/util/stream/Sink;)V -> java.util.stream.SpinedBuffer$1Splitr.estimateSize()J
java.util.stream.AbstractPipeline.copyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)V -> java.util.stream.SpinedBuffer$1Splitr.forEachRemaining(Ljava/util/function/Consumer;)V
java.util.stream.ReferencePipeline.forEachWithCancel(Ljava/util/Spliterator;Ljava/util/stream/Sink;)V -> java.util.stream.SpinedBuffer$1Splitr.tryAdvance(Ljava/util/function/Consumer;)Z
java.util.stream.SpinedBuffer$1Splitr.tryAdvance(Ljava/util/function/Consumer;)Z -> java.util.Objects.requireNonNull(Ljava/lang/Object;)Ljava/lang/Object;
java.util.stream.SpinedBuffer$1Splitr.tryAdvance(Ljava/util/function/Consumer;)Z -> java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Ljava/lang/Object;)V
java.util.stream.SpinedBuffer$1Splitr.tryAdvance(Ljava/util/function/Consumer;)Z -> java.util.stream.Nodes$FixedNodeBuilder.accept(Ljava/lang/Object;)V
java.util.stream.SpinedBuffer$1Splitr.tryAdvance(Ljava/util/function/Consumer;)Z -> java.util.stream.Nodes$SpinedNodeBuilder.accept(Ljava/lang/Object;)V
java.util.stream.ForEachOps$ForEachTask.compute()V -> java.util.stream.SpinedBuffer$1Splitr.estimateSize()J
java.util.stream.ForEachOps$ForEachTask.compute()V -> java.util.stream.SpinedBuffer$1Splitr.trySplit()Ljava/util/Spliterator;
java.util.stream.ForEachOps$ForEachOrderedTask.doCompute(Ljava/util/stream/ForEachOps$ForEachOrderedTask;)V -> java.util.stream.SpinedBuffer$1Splitr.estimateSize()J
java.util.stream.ForEachOps$ForEachOrderedTask.doCompute(Ljava/util/stream/ForEachOps$ForEachOrderedTask;)V -> java.util.stream.SpinedBuffer$1Splitr.trySplit()Ljava/util/Spliterator;
java.util.stream.SpinedBuffer$1Splitr.trySplit()Ljava/util/Spliterator; -> java.util.stream.SpinedBuffer$1Splitr.<init>(Ljava/util/stream/SpinedBuffer;IIII)V
java.util.stream.SpinedBuffer$1Splitr.trySplit()Ljava/util/Spliterator; -> java.util.Arrays.spliterator([Ljava/lang/Object;II)Ljava/util/Spliterator;
java.util.stream.Nodes$SpinedNodeBuilder.<init>()V -> java.util.stream.SpinedBuffer.<init>()V
java.util.stream.Nodes$SpinedNodeBuilder.begin(J)V -> java.util.stream.SpinedBuffer.ensureCapacity(J)V
java.util.stream.Nodes$SpinedNodeBuilder.begin(J)V -> java.util.stream.SpinedBuffer.clear()V
java.util.stream.Nodes$SpinedNodeBuilder.accept(Ljava/lang/Object;)V -> java.util.stream.SpinedBuffer.accept(Ljava/lang/Object;)V
java.util.stream.Nodes$SpinedNodeBuilder.forEach(Ljava/util/function/Consumer;)V -> java.util.stream.SpinedBuffer.forEach(Ljava/util/function/Consumer;)V
java.util.stream.SpinedBuffer.forEach(Ljava/util/function/Consumer;)V -> java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Ljava/lang/Object;)V
