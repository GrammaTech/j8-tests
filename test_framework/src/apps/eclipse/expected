java.io.BufferedInputStream.<clinit>()V -> java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
java.io.BufferedInputStream.fill()V -> java.io.PushbackInputStream.read([BII)I
java.io.BufferedInputStream.fill()V -> java.util.jar.JarInputStream.read([BII)I
java.io.BufferedInputStream.read([BII)I -> java.io.BufferedInputStream.read1([BII)I
java.io.BufferedInputStream.read1([BII)I -> java.io.BufferedInputStream.fill()V
java.io.BufferedInputStream.read1([BII)I -> java.io.PushbackInputStream.read([BII)I
java.io.BufferedInputStream.read1([BII)I -> java.util.jar.JarInputStream.read([BII)I
java.io.BufferedWriter.<init>(Ljava/io/Writer;)V -> java.io.BufferedWriter.<init>(Ljava/io/Writer;I)V
java.io.BufferedWriter.<init>(Ljava/io/Writer;I)V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.io.DefaultFileSystem.getFileSystem()Ljava/io/FileSystem; -> java.io.UnixFileSystem.<init>()V
java.io.ExpiringCache.cleanup()V -> java.io.ExpiringCache.entryFor(Ljava/lang/String;)Ljava/io/ExpiringCache$Entry;
java.io.ExpiringCache.entryFor(Ljava/lang/String;)Ljava/io/ExpiringCache$Entry; -> java.util.HashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;
java.io.ExpiringCache.entryFor(Ljava/lang/String;)Ljava/io/ExpiringCache$Entry; -> java.util.LinkedHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;
java.io.ExpiringCache.get(Ljava/lang/String;)Ljava/lang/String; -> java.io.ExpiringCache.cleanup()V
java.io.ExpiringCache.get(Ljava/lang/String;)Ljava/lang/String; -> java.io.ExpiringCache.entryFor(Ljava/lang/String;)Ljava/io/ExpiringCache$Entry;
java.io.ExpiringCache.put(Ljava/lang/String;Ljava/lang/String;)V -> java.io.ExpiringCache.cleanup()V
java.io.ExpiringCache.put(Ljava/lang/String;Ljava/lang/String;)V -> java.io.ExpiringCache.entryFor(Ljava/lang/String;)Ljava/io/ExpiringCache$Entry;
java.io.ExpiringCache.put(Ljava/lang/String;Ljava/lang/String;)V -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.io.File$TempDirectory.<clinit>()V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.io.File$TempDirectory.generateFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.io.File.<clinit>()V -> java.io.DefaultFileSystem.getFileSystem()Ljava/io/FileSystem;
java.io.File.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.io.File.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.io.File.canWrite()Z -> java.lang.SecurityManager.checkWrite(Ljava/lang/String;)V
java.io.File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; -> java.io.File$TempDirectory.generateFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
java.io.File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; -> java.lang.SecurityManager.checkWrite(Ljava/lang/String;)V
java.io.File.delete()Z -> java.lang.SecurityManager.checkDelete(Ljava/lang/String;)V
java.io.File.exists()Z -> java.lang.SecurityManager.checkRead(Ljava/lang/String;)V
java.io.File.getCanonicalFile()Ljava/io/File; -> java.io.File.getCanonicalPath()Ljava/lang/String;
java.io.File.getCanonicalPath()Ljava/lang/String; -> java.io.UnixFileSystem.canonicalize(Ljava/lang/String;)Ljava/lang/String;
java.io.File.isDirectory()Z -> java.lang.SecurityManager.checkRead(Ljava/lang/String;)V
java.io.File.isFile()Z -> java.lang.SecurityManager.checkRead(Ljava/lang/String;)V
java.io.File.lastModified()J -> java.lang.SecurityManager.checkRead(Ljava/lang/String;)V
java.io.File.list()[Ljava/lang/String; -> java.lang.SecurityManager.checkRead(Ljava/lang/String;)V
java.io.File.mkdir()Z -> java.lang.SecurityManager.checkWrite(Ljava/lang/String;)V
java.io.File.mkdirs()Z -> java.io.File.exists()Z
java.io.File.mkdirs()Z -> java.io.File.getCanonicalFile()Ljava/io/File;
java.io.File.mkdirs()Z -> java.io.File.mkdir()Z
java.io.File.mkdirs()Z -> java.io.File.mkdirs()Z
java.io.File.toURL()Ljava/net/URL; -> java.io.File.isDirectory()Z
java.io.File.toURL()Ljava/net/URL; -> java.net.URL.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
java.io.FileInputStream.<init>(Ljava/io/File;)V -> java.lang.SecurityManager.checkRead(Ljava/lang/String;)V
java.io.FileInputStream.<init>(Ljava/io/FileDescriptor;)V -> java.lang.SecurityManager.checkRead(Ljava/io/FileDescriptor;)V
java.io.FileInputStream.<init>(Ljava/lang/String;)V -> java.io.FileInputStream.<init>(Ljava/io/File;)V
java.io.FileOutputStream.<init>(Ljava/io/File;)V -> java.io.FileOutputStream.<init>(Ljava/io/File;Z)V
java.io.FileOutputStream.<init>(Ljava/io/File;Z)V -> java.lang.SecurityManager.checkWrite(Ljava/lang/String;)V
java.io.FileOutputStream.<init>(Ljava/io/FileDescriptor;)V -> java.lang.SecurityManager.checkWrite(Ljava/io/FileDescriptor;)V
java.io.FileOutputStream.<init>(Ljava/lang/String;Z)V -> java.io.FileOutputStream.<init>(Ljava/io/File;Z)V
java.io.FilePermission$1.run()Ljava/lang/Object; -> java.io.FilePermission$1.run()Ljava/lang/String;
java.io.FilePermission$1.run()Ljava/lang/String; -> java.io.File.getCanonicalPath()Ljava/lang/String;
java.io.FilePermission.<init>(Ljava/lang/String;Ljava/lang/String;)V -> java.io.FilePermission.init(I)V
java.io.FilePermission.init(I)V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.io.FilePermissionCollection.add(Ljava/security/Permission;)V -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.io.FilterInputStream.read()I -> java.io.PushbackInputStream.read()I
java.io.FilterInputStream.read()I -> java.util.zip.InflaterInputStream.read()I
java.io.FilterInputStream.read([B)I -> java.io.BufferedInputStream.read([BII)I
java.io.FilterInputStream.read([B)I -> java.util.zip.InflaterInputStream.read([BII)I
java.io.FilterInputStream.read([BII)I -> java.io.PushbackInputStream.read([BII)I
java.io.FilterInputStream.read([BII)I -> java.util.jar.JarInputStream.read([BII)I
java.io.InputStream.read([B)I -> java.util.zip.InflaterInputStream.read([BII)I
java.io.InputStream.read([BII)I -> java.io.PushbackInputStream.read()I
java.io.InputStream.read([BII)I -> java.util.zip.InflaterInputStream.read()I
java.io.PrintStream.<init>(Ljava/io/OutputStream;)V -> java.io.PrintStream.<init>(Ljava/io/OutputStream;Z)V
java.io.PrintStream.<init>(Ljava/io/OutputStream;Z)V -> java.io.PrintStream.<init>(ZLjava/io/OutputStream;)V
java.io.PrintStream.<init>(ZLjava/io/OutputStream;)V -> java.io.BufferedWriter.<init>(Ljava/io/Writer;)V
java.io.PrintStream.newLine()V -> java.lang.Thread.interrupt()V
java.io.PrintStream.print(Ljava/lang/String;)V -> java.io.PrintStream.write(Ljava/lang/String;)V
java.io.PrintStream.println(Ljava/lang/Object;)V -> java.io.PrintStream.newLine()V
java.io.PrintStream.println(Ljava/lang/Object;)V -> java.io.PrintStream.print(Ljava/lang/String;)V
java.io.PrintStream.println(Ljava/lang/Object;)V -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
java.io.PrintStream.println(Ljava/lang/String;)V -> java.io.PrintStream.newLine()V
java.io.PrintStream.println(Ljava/lang/String;)V -> java.io.PrintStream.print(Ljava/lang/String;)V
java.io.PrintStream.write(Ljava/lang/String;)V -> java.lang.Thread.interrupt()V
java.io.PrintWriter.<init>(Ljava/io/Writer;)V -> java.io.PrintWriter.<init>(Ljava/io/Writer;Z)V
java.io.PrintWriter.<init>(Ljava/io/Writer;Z)V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.io.PrintWriter.newLine()V -> java.lang.Thread.interrupt()V
java.io.PrintWriter.print(Ljava/lang/String;)V -> java.io.PrintWriter.write(Ljava/lang/String;)V
java.io.PrintWriter.println()V -> java.io.PrintWriter.newLine()V
java.io.PrintWriter.println(Ljava/lang/Object;)V -> java.io.PrintWriter.print(Ljava/lang/String;)V
java.io.PrintWriter.println(Ljava/lang/Object;)V -> java.io.PrintWriter.println()V
java.io.PrintWriter.println(Ljava/lang/Object;)V -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
java.io.PrintWriter.write(Ljava/lang/String;)V -> java.io.PrintWriter.write(Ljava/lang/String;II)V
java.io.PrintWriter.write(Ljava/lang/String;II)V -> java.lang.Thread.interrupt()V
java.io.PushbackInputStream.read()I -> java.io.FilterInputStream.read()I
java.io.PushbackInputStream.read([BII)I -> java.io.FilterInputStream.read([BII)I
java.io.UnixFileSystem.<init>()V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.io.UnixFileSystem.canonicalize(Ljava/lang/String;)Ljava/lang/String; -> java.io.ExpiringCache.get(Ljava/lang/String;)Ljava/lang/String;
java.io.UnixFileSystem.canonicalize(Ljava/lang/String;)Ljava/lang/String; -> java.io.ExpiringCache.put(Ljava/lang/String;Ljava/lang/String;)V
java.io.UnixFileSystem.canonicalize(Ljava/lang/String;)Ljava/lang/String; -> java.io.File.exists()Z
java.io.UnixFileSystem.canonicalize(Ljava/lang/String;)Ljava/lang/String; -> java.io.File.isDirectory()Z
java.lang.ApplicationShutdownHooks$1.run()V -> java.lang.ApplicationShutdownHooks.runHooks()V
java.lang.ApplicationShutdownHooks.runHooks()V -> java.lang.Thread.start()V
java.lang.AssertionError.<init>(Ljava/lang/Object;)V -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
java.lang.Character.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.CharacterData00.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.CharacterData01.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.CharacterData02.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.CharacterData0E.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.CharacterDataLatin1.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.Class$4.run()Ljava/lang/Object; -> java.lang.Class$4.run()Ljava/lang/Void;
java.lang.Class$4.run()Ljava/lang/Void; -> java.lang.reflect.AccessibleObject.setAccessible(Z)V
java.lang.Class$Atomic.<clinit>()V -> java.lang.Class$Atomic.objectFieldOffset([Ljava/lang/reflect/Field;Ljava/lang/String;)J
java.lang.Class$Atomic.objectFieldOffset([Ljava/lang/reflect/Field;Ljava/lang/String;)J -> java.lang.Class.access$200([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field;
java.lang.Class$EnclosingMethodInfo.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.Class.access$200([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field; -> java.lang.Class.searchFields([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field;
java.lang.Class.checkInitted()V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.lang.Class.checkMemberAccess(ILjava/lang/Class;Z)V -> java.lang.Class.checkPackageAccess(Ljava/lang/ClassLoader;Z)V
java.lang.Class.checkMemberAccess(ILjava/lang/Class;Z)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.Class.checkPackageAccess(Ljava/lang/ClassLoader;Z)V -> java.lang.SecurityManager.checkPackageAccess(Ljava/lang/String;)V
java.lang.Class.desiredAssertionStatus()Z -> java.lang.Class.getClassLoader()Ljava/lang/ClassLoader;
java.lang.Class.enumConstantDirectory()Ljava/util/Map; -> java.lang.Class.getEnumConstantsShared()[Ljava/lang/Object;
java.lang.Class.enumConstantDirectory()Ljava/util/Map; -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.lang.Class.forName(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class; -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.Class.getClassLoader()Ljava/lang/ClassLoader; -> java.lang.ClassLoader.checkClassLoaderPermission(Ljava/lang/ClassLoader;Ljava/lang/Class;)V
java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; -> java.lang.Class.checkMemberAccess(ILjava/lang/Class;Z)V
java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; -> java.lang.Class.privateGetDeclaredFields(Z)[Ljava/lang/reflect/Field;
java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; -> java.lang.Class.searchFields([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field;
java.lang.Class.getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; -> java.lang.Class.checkMemberAccess(ILjava/lang/Class;Z)V
java.lang.Class.getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; -> java.lang.Class.privateGetDeclaredMethods(Z)[Ljava/lang/reflect/Method;
java.lang.Class.getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; -> java.lang.Class.searchMethods([Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
java.lang.Class.getEnumConstantsShared()[Ljava/lang/Object; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.lang.Class.getProtectionDomain()Ljava/security/ProtectionDomain; -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.Class.getProtectionDomain()Ljava/security/ProtectionDomain; -> java.security.Permissions.add(Ljava/security/Permission;)V
java.lang.Class.getReflectionFactory()Lsun/reflect/ReflectionFactory; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.lang.Class.privateGetDeclaredFields(Z)[Ljava/lang/reflect/Field; -> java.lang.Class.checkInitted()V
java.lang.Class.privateGetDeclaredMethods(Z)[Ljava/lang/reflect/Method; -> java.lang.Class.checkInitted()V
java.lang.Class.searchFields([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field; -> java.lang.Class.getReflectionFactory()Lsun/reflect/ReflectionFactory;
java.lang.Class.searchMethods([Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; -> java.lang.Class.getReflectionFactory()Lsun/reflect/ReflectionFactory;
java.lang.ClassLoader$3.run()Ljava/lang/Object; -> java.io.File.exists()Z
java.lang.ClassLoader.<init>(Ljava/lang/ClassLoader;)V -> java.lang.ClassLoader.checkCreateClassLoader()Ljava/lang/Void;
java.lang.ClassLoader.checkCerts(Ljava/lang/String;Ljava/security/CodeSource;)V -> java.util.Hashtable.get(Ljava/lang/Object;)Ljava/lang/Object;
java.lang.ClassLoader.checkCerts(Ljava/lang/String;Ljava/security/CodeSource;)V -> java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.lang.ClassLoader.checkClassLoaderPermission(Ljava/lang/ClassLoader;Ljava/lang/Class;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.ClassLoader.checkCreateClassLoader()Ljava/lang/Void; -> java.lang.SecurityManager.checkCreateClassLoader()V
java.lang.ClassLoader.defineClass(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class; -> java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;
java.lang.ClassLoader.defineClass(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class; -> java.lang.ClassLoader.preDefineClass(Ljava/lang/String;Ljava/security/ProtectionDomain;)Ljava/security/ProtectionDomain;
java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; -> java.lang.ClassLoader.preDefineClass(Ljava/lang/String;Ljava/security/ProtectionDomain;)Ljava/security/ProtectionDomain;
java.lang.ClassLoader.definePackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package; -> java.lang.ClassLoader.getPackage(Ljava/lang/String;)Ljava/lang/Package;
java.lang.ClassLoader.definePackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package; -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.lang.ClassLoader.getPackage(Ljava/lang/String;)Ljava/lang/Package; -> java.lang.ClassLoader.getPackage(Ljava/lang/String;)Ljava/lang/Package;
java.lang.ClassLoader.getPackage(Ljava/lang/String;)Ljava/lang/Package; -> java.lang.Package.getSystemPackage(Ljava/lang/String;)Ljava/lang/Package;
java.lang.ClassLoader.getPackage(Ljava/lang/String;)Ljava/lang/Package; -> java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object;
java.lang.ClassLoader.getPackage(Ljava/lang/String;)Ljava/lang/Package; -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.lang.ClassLoader.getParent()Ljava/lang/ClassLoader; -> java.lang.ClassLoader.checkClassLoaderPermission(Ljava/lang/ClassLoader;Ljava/lang/Class;)V
java.lang.ClassLoader.getSystemClassLoader()Ljava/lang/ClassLoader; -> java.lang.ClassLoader.checkClassLoaderPermission(Ljava/lang/ClassLoader;Ljava/lang/Class;)V
java.lang.ClassLoader.getSystemClassLoader()Ljava/lang/ClassLoader; -> java.lang.ClassLoader.initSystemClassLoader()V
java.lang.ClassLoader.getSystemResources(Ljava/lang/String;)Ljava/util/Enumeration; -> java.lang.ClassLoader.getSystemClassLoader()Ljava/lang/ClassLoader;
java.lang.ClassLoader.initSystemClassLoader()V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class; -> java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;
java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; -> java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;
java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; -> java.net.URLClassLoader.findClass(Ljava/lang/String;)Ljava/lang/Class;
java.lang.ClassLoader.loadLibrary(Ljava/lang/Class;Ljava/lang/String;Z)V -> java.lang.ClassLoader.loadLibrary0(Ljava/lang/Class;Ljava/io/File;)Z
java.lang.ClassLoader.loadLibrary0(Ljava/lang/Class;Ljava/io/File;)Z -> java.io.File.getCanonicalPath()Ljava/lang/String;
java.lang.ClassLoader.loadLibrary0(Ljava/lang/Class;Ljava/io/File;)Z -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.lang.ClassLoader.preDefineClass(Ljava/lang/String;Ljava/security/ProtectionDomain;)Ljava/security/ProtectionDomain; -> java.lang.ClassLoader.checkCerts(Ljava/lang/String;Ljava/security/CodeSource;)V
java.lang.ConditionalSpecialCasing.<clinit>()V -> java.util.HashSet.add(Ljava/lang/Object;)Z
java.lang.ConditionalSpecialCasing.<clinit>()V -> java.util.Hashtable.get(Ljava/lang/Object;)Ljava/lang/Object;
java.lang.ConditionalSpecialCasing.<clinit>()V -> java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.lang.ConditionalSpecialCasing.lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)[C -> java.util.Hashtable.get(Ljava/lang/Object;)Ljava/lang/Object;
java.lang.ConditionalSpecialCasing.toLowerCaseCharArray(Ljava/lang/String;ILjava/util/Locale;)[C -> java.lang.ConditionalSpecialCasing.lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)[C
java.lang.ConditionalSpecialCasing.toLowerCaseEx(Ljava/lang/String;ILjava/util/Locale;)I -> java.lang.ConditionalSpecialCasing.lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)[C
java.lang.ConditionalSpecialCasing.toUpperCaseCharArray(Ljava/lang/String;ILjava/util/Locale;)[C -> java.lang.ConditionalSpecialCasing.lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)[C
java.lang.ConditionalSpecialCasing.toUpperCaseEx(Ljava/lang/String;ILjava/util/Locale;)I -> java.lang.ConditionalSpecialCasing.lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)[C
java.lang.Enum.valueOf(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; -> java.lang.Class.enumConstantDirectory()Ljava/util/Map;
java.lang.Enum.valueOf(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; -> java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object;
java.lang.Math.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.Object.toString()Ljava/lang/String; -> java.lang.StackTraceElement.hashCode()I
java.lang.Object.toString()Ljava/lang/String; -> java.net.SocketPermission.hashCode()I
java.lang.Package$1.run()Ljava/lang/Object; -> java.lang.Package$1.run()Ljava/lang/Package;
java.lang.Package$1.run()Ljava/lang/Package; -> java.io.File.isFile()Z
java.lang.Package$1.run()Ljava/lang/Package; -> java.lang.Package.<init>(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;Ljava/lang/ClassLoader;Ljava/lang/Package$1;)V
java.lang.Package$1.run()Ljava/lang/Package; -> java.lang.Package.access$100(Ljava/lang/String;)Ljava/util/jar/Manifest;
java.lang.Package$1.run()Ljava/lang/Package; -> java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object;
java.lang.Package$1.run()Ljava/lang/Package; -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.lang.Package.<init>(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;Ljava/lang/ClassLoader;)V -> java.util.jar.Attributes.getValue(Ljava/util/jar/Attributes$Name;)Ljava/lang/String;
java.lang.Package.<init>(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;Ljava/lang/ClassLoader;)V -> java.util.jar.Manifest.getAttributes(Ljava/lang/String;)Ljava/util/jar/Attributes;
java.lang.Package.<init>(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;Ljava/lang/ClassLoader;Ljava/lang/Package$1;)V -> java.lang.Package.<init>(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;Ljava/lang/ClassLoader;)V
java.lang.Package.access$100(Ljava/lang/String;)Ljava/util/jar/Manifest; -> java.lang.Package.loadManifest(Ljava/lang/String;)Ljava/util/jar/Manifest;
java.lang.Package.defineSystemPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Package; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.lang.Package.getSystemPackage(Ljava/lang/String;)Ljava/lang/Package; -> java.lang.Package.defineSystemPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Package;
java.lang.Package.getSystemPackage(Ljava/lang/String;)Ljava/lang/Package; -> java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object;
java.lang.Package.loadManifest(Ljava/lang/String;)Ljava/util/jar/Manifest; -> java.io.FileInputStream.<init>(Ljava/lang/String;)V
java.lang.Package.loadManifest(Ljava/lang/String;)Ljava/util/jar/Manifest; -> java.util.jar.JarInputStream.<init>(Ljava/io/InputStream;Z)V
java.lang.ProcessBuilder$Redirect.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.ProcessBuilder.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.ProcessBuilder.environment([Ljava/lang/String;)Ljava/lang/ProcessBuilder; -> java.lang.ProcessEnvironment$StringEnvironment.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.lang.ProcessBuilder.start()Ljava/lang/Process; -> java.lang.ProcessImpl.start([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;[Ljava/lang/ProcessBuilder$Redirect;Z)Ljava/lang/Process;
java.lang.ProcessBuilder.start()Ljava/lang/Process; -> java.lang.SecurityManager.checkExec(Ljava/lang/String;)V
java.lang.ProcessBuilder.start()Ljava/lang/Process; -> java.lang.SecurityManager.checkRead(Ljava/lang/String;)V
java.lang.ProcessEnvironment$StringEnvironment.get(Ljava/lang/Object;)Ljava/lang/Object; -> java.lang.ProcessEnvironment$StringEnvironment.get(Ljava/lang/Object;)Ljava/lang/String;
java.lang.ProcessEnvironment$StringEnvironment.get(Ljava/lang/Object;)Ljava/lang/String; -> java.lang.ProcessEnvironment$Variable.valueOfQueryOnly(Ljava/lang/Object;)Ljava/lang/ProcessEnvironment$Variable;
java.lang.ProcessEnvironment$StringEnvironment.get(Ljava/lang/Object;)Ljava/lang/String; -> java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object;
java.lang.ProcessEnvironment$StringEnvironment.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; -> java.lang.ProcessEnvironment$StringEnvironment.put(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
java.lang.ProcessEnvironment$StringEnvironment.put(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.lang.ProcessEnvironment$Variable.valueOf(Ljava/lang/String;)Ljava/lang/ProcessEnvironment$Variable;
java.lang.ProcessEnvironment$StringEnvironment.put(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.lang.ProcessEnvironment$Value.valueOf([B)Ljava/lang/ProcessEnvironment$Value; -> java.lang.String.<init>([B)V
java.lang.ProcessEnvironment$Variable.valueOf(Ljava/lang/String;)Ljava/lang/ProcessEnvironment$Variable; -> java.lang.ProcessEnvironment$Variable.valueOfQueryOnly(Ljava/lang/String;)Ljava/lang/ProcessEnvironment$Variable;
java.lang.ProcessEnvironment$Variable.valueOf([B)Ljava/lang/ProcessEnvironment$Variable; -> java.lang.String.<init>([B)V
java.lang.ProcessEnvironment$Variable.valueOfQueryOnly(Ljava/lang/Object;)Ljava/lang/ProcessEnvironment$Variable; -> java.lang.ProcessEnvironment$Variable.valueOfQueryOnly(Ljava/lang/String;)Ljava/lang/ProcessEnvironment$Variable;
java.lang.ProcessEnvironment$Variable.valueOfQueryOnly(Ljava/lang/String;)Ljava/lang/ProcessEnvironment$Variable; -> java.lang.String.getBytes()[B
java.lang.ProcessEnvironment.<clinit>()V -> java.lang.ProcessEnvironment$Value.valueOf([B)Ljava/lang/ProcessEnvironment$Value;
java.lang.ProcessEnvironment.<clinit>()V -> java.lang.ProcessEnvironment$Variable.valueOf([B)Ljava/lang/ProcessEnvironment$Variable;
java.lang.ProcessEnvironment.<clinit>()V -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.lang.ProcessImpl.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.ProcessImpl.start([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;[Ljava/lang/ProcessBuilder$Redirect;Z)Ljava/lang/Process; -> java.io.FileInputStream.<init>(Ljava/io/File;)V
java.lang.ProcessImpl.start([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;[Ljava/lang/ProcessBuilder$Redirect;Z)Ljava/lang/Process; -> java.io.FileOutputStream.<init>(Ljava/io/File;Z)V
java.lang.ProcessImpl.start([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;[Ljava/lang/ProcessBuilder$Redirect;Z)Ljava/lang/Process; -> java.lang.ProcessImpl.toCString(Ljava/lang/String;)[B
java.lang.ProcessImpl.start([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;[Ljava/lang/ProcessBuilder$Redirect;Z)Ljava/lang/Process; -> java.lang.String.getBytes()[B
java.lang.ProcessImpl.start([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;[Ljava/lang/ProcessBuilder$Redirect;Z)Ljava/lang/Process; -> java.lang.UNIXProcess.<init>([B[BI[BI[B[IZ)V
java.lang.ProcessImpl.toCString(Ljava/lang/String;)[B -> java.lang.String.getBytes()[B
java.lang.Runtime.addShutdownHook(Ljava/lang/Thread;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.Runtime.exec([Ljava/lang/String;)Ljava/lang/Process; -> java.lang.Runtime.exec([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;
java.lang.Runtime.exec([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process; -> java.lang.ProcessBuilder.environment([Ljava/lang/String;)Ljava/lang/ProcessBuilder;
java.lang.Runtime.exec([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process; -> java.lang.ProcessBuilder.start()Ljava/lang/Process;
java.lang.Runtime.exit(I)V -> java.lang.SecurityManager.checkExit(I)V
java.lang.Runtime.exit(I)V -> java.lang.Shutdown.exit(I)V
java.lang.Runtime.load(Ljava/lang/String;)V -> java.lang.Runtime.load0(Ljava/lang/Class;Ljava/lang/String;)V
java.lang.Runtime.load0(Ljava/lang/Class;Ljava/lang/String;)V -> java.lang.ClassLoader.loadLibrary(Ljava/lang/Class;Ljava/lang/String;Z)V
java.lang.Runtime.load0(Ljava/lang/Class;Ljava/lang/String;)V -> java.lang.SecurityManager.checkLink(Ljava/lang/String;)V
java.lang.Runtime.loadLibrary0(Ljava/lang/Class;Ljava/lang/String;)V -> java.lang.ClassLoader.loadLibrary(Ljava/lang/Class;Ljava/lang/String;Z)V
java.lang.Runtime.loadLibrary0(Ljava/lang/Class;Ljava/lang/String;)V -> java.lang.SecurityManager.checkLink(Ljava/lang/String;)V
java.lang.Runtime.removeShutdownHook(Ljava/lang/Thread;)Z -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager$1.run()Ljava/lang/Object; -> java.lang.SecurityManager$1.run()Ljava/lang/String;
java.lang.SecurityManager$1.run()Ljava/lang/String; -> java.security.Security.getProperty(Ljava/lang/String;)Ljava/lang/String;
java.lang.SecurityManager.checkAccess(Ljava/lang/Thread;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager.checkConnect(Ljava/lang/String;I)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager.checkConnect(Ljava/lang/String;I)V -> java.net.SocketPermission.<init>(Ljava/lang/String;Ljava/lang/String;)V
java.lang.SecurityManager.checkCreateClassLoader()V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager.checkDelete(Ljava/lang/String;)V -> java.io.FilePermission.<init>(Ljava/lang/String;Ljava/lang/String;)V
java.lang.SecurityManager.checkDelete(Ljava/lang/String;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager.checkExec(Ljava/lang/String;)V -> java.io.FilePermission.<init>(Ljava/lang/String;Ljava/lang/String;)V
java.lang.SecurityManager.checkExec(Ljava/lang/String;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager.checkExit(I)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager.checkLink(Ljava/lang/String;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager.checkPackageAccess(Ljava/lang/String;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager.checkPackageAccess(Ljava/lang/String;)V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V -> java.security.AccessController.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager.checkPropertiesAccess()V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager.checkRead(Ljava/io/FileDescriptor;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager.checkRead(Ljava/lang/String;)V -> java.io.FilePermission.<init>(Ljava/lang/String;Ljava/lang/String;)V
java.lang.SecurityManager.checkRead(Ljava/lang/String;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager.checkWrite(Ljava/io/FileDescriptor;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.SecurityManager.checkWrite(Ljava/lang/String;)V -> java.io.FilePermission.<init>(Ljava/lang/String;Ljava/lang/String;)V
java.lang.SecurityManager.checkWrite(Ljava/lang/String;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.Shutdown.exit(I)V -> java.lang.Shutdown.sequence()V
java.lang.Shutdown.runHooks()V -> java.lang.ApplicationShutdownHooks$1.run()V
java.lang.Shutdown.sequence()V -> java.lang.Shutdown.runHooks()V
java.lang.StackTraceElement.hashCode()I -> java.util.Objects.hashCode(Ljava/lang/Object;)I
java.lang.StrictMath.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.String.<init>([B)V -> java.lang.String.<init>([BII)V
java.lang.String.<init>([BII)V -> java.lang.StringCoding.decode([BII)[C
java.lang.String.<init>([BIILjava/lang/String;)V -> java.lang.StringCoding.decode(Ljava/lang/String;[BII)[C
java.lang.String.getBytes()[B -> java.lang.StringCoding.encode([CII)[B
java.lang.String.toLowerCase()Ljava/lang/String; -> java.lang.String.toLowerCase(Ljava/util/Locale;)Ljava/lang/String;
java.lang.String.toLowerCase(Ljava/util/Locale;)Ljava/lang/String; -> java.lang.ConditionalSpecialCasing.toLowerCaseCharArray(Ljava/lang/String;ILjava/util/Locale;)[C
java.lang.String.toLowerCase(Ljava/util/Locale;)Ljava/lang/String; -> java.lang.ConditionalSpecialCasing.toLowerCaseEx(Ljava/lang/String;ILjava/util/Locale;)I
java.lang.String.toUpperCase(Ljava/util/Locale;)Ljava/lang/String; -> java.lang.ConditionalSpecialCasing.toUpperCaseCharArray(Ljava/lang/String;ILjava/util/Locale;)[C
java.lang.String.toUpperCase(Ljava/util/Locale;)Ljava/lang/String; -> java.lang.ConditionalSpecialCasing.toUpperCaseEx(Ljava/lang/String;ILjava/util/Locale;)I
java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String; -> java.lang.Object.toString()Ljava/lang/String;
java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String; -> java.security.CodeSource.toString()Ljava/lang/String;
java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String; -> java.security.PermissionCollection.toString()Ljava/lang/String;
java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String; -> java.security.ProtectionDomain.toString()Ljava/lang/String;
java.lang.StringBuffer.append(Ljava/lang/Object;)Ljava/lang/StringBuffer; -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder; -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
java.lang.StringCoding.decode(Ljava/lang/String;[BII)[C -> java.lang.StringCoding.lookupCharset(Ljava/lang/String;)Ljava/nio/charset/Charset;
java.lang.StringCoding.decode([BII)[C -> java.lang.StringCoding.decode(Ljava/lang/String;[BII)[C
java.lang.StringCoding.decode([BII)[C -> java.lang.System.exit(I)V
java.lang.StringCoding.decode([BII)[C -> java.nio.charset.Charset.defaultCharset()Ljava/nio/charset/Charset;
java.lang.StringCoding.encode(Ljava/lang/String;[CII)[B -> java.lang.StringCoding.lookupCharset(Ljava/lang/String;)Ljava/nio/charset/Charset;
java.lang.StringCoding.encode([CII)[B -> java.lang.StringCoding.encode(Ljava/lang/String;[CII)[B
java.lang.StringCoding.encode([CII)[B -> java.lang.System.exit(I)V
java.lang.StringCoding.encode([CII)[B -> java.nio.charset.Charset.defaultCharset()Ljava/nio/charset/Charset;
java.lang.StringCoding.lookupCharset(Ljava/lang/String;)Ljava/nio/charset/Charset; -> java.nio.charset.Charset.forName(Ljava/lang/String;)Ljava/nio/charset/Charset;
java.lang.StringCoding.lookupCharset(Ljava/lang/String;)Ljava/nio/charset/Charset; -> java.nio.charset.Charset.isSupported(Ljava/lang/String;)Z
java.lang.System.exit(I)V -> java.lang.Runtime.exit(I)V
java.lang.System.getProperties()Ljava/util/Properties; -> java.lang.SecurityManager.checkPropertiesAccess()V
java.lang.System.loadLibrary(Ljava/lang/String;)V -> java.lang.Runtime.loadLibrary0(Ljava/lang/Class;Ljava/lang/String;)V
java.lang.System.setProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.System.setSecurityManager(Ljava/lang/SecurityManager;)V -> java.lang.System.setSecurityManager0(Ljava/lang/SecurityManager;)V
java.lang.System.setSecurityManager0(Ljava/lang/SecurityManager;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.System.setSecurityManager0(Ljava/lang/SecurityManager;)V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.lang.SystemClassLoaderAction.run()Ljava/lang/ClassLoader; -> java.lang.Class.forName(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;
java.lang.SystemClassLoaderAction.run()Ljava/lang/ClassLoader; -> java.lang.Thread.setContextClassLoader(Ljava/lang/ClassLoader;)V
java.lang.SystemClassLoaderAction.run()Ljava/lang/Object; -> java.lang.SystemClassLoaderAction.run()Ljava/lang/ClassLoader;
java.lang.Thread$1.run()Ljava/lang/Boolean; -> java.lang.Class.getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
java.lang.Thread$1.run()Ljava/lang/Object; -> java.lang.Thread$1.run()Ljava/lang/Boolean;
java.lang.Thread.<init>(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V -> java.lang.Thread.init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V
java.lang.Thread.<init>(Ljava/lang/ThreadGroup;Ljava/lang/String;)V -> java.lang.Thread.init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V
java.lang.Thread.auditSubclass(Ljava/lang/Class;)Z -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.lang.Thread.checkAccess()V -> java.lang.SecurityManager.checkAccess(Ljava/lang/Thread;)V
java.lang.Thread.dumpStack()V -> java.lang.Throwable.printStackTrace()V
java.lang.Thread.getContextClassLoader()Ljava/lang/ClassLoader; -> java.lang.ClassLoader.checkClassLoaderPermission(Ljava/lang/ClassLoader;Ljava/lang/Class;)V
java.lang.Thread.init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V -> java.lang.Thread.init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;)V
java.lang.Thread.init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.Thread.init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;)V -> java.lang.Thread.getContextClassLoader()Ljava/lang/ClassLoader;
java.lang.Thread.init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;)V -> java.lang.Thread.isCCLOverridden(Ljava/lang/Class;)Z
java.lang.Thread.init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;)V -> java.lang.Thread.setPriority(I)V
java.lang.Thread.interrupt()V -> java.lang.Thread.checkAccess()V
java.lang.Thread.isCCLOverridden(Ljava/lang/Class;)Z -> java.lang.Thread.auditSubclass(Ljava/lang/Class;)Z
java.lang.Thread.run()V -> java.lang.Thread.run()V
java.lang.Thread.run()V -> java.util.concurrent.ThreadPoolExecutor$Worker.run()V
java.lang.Thread.run()V -> org.eclipse.equinox.launcher.Main$SplashHandler.run()V
java.lang.Thread.setContextClassLoader(Ljava/lang/ClassLoader;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.Thread.setDaemon(Z)V -> java.lang.Thread.checkAccess()V
java.lang.Thread.setPriority(I)V -> java.lang.Thread.checkAccess()V
java.lang.Throwable$WrappedPrintStream.println(Ljava/lang/Object;)V -> java.io.PrintStream.println(Ljava/lang/Object;)V
java.lang.Throwable$WrappedPrintWriter.println(Ljava/lang/Object;)V -> java.io.PrintWriter.println(Ljava/lang/Object;)V
java.lang.Throwable.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.Throwable.printEnclosedStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.lang.Throwable.printEnclosedStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V -> java.lang.Throwable$WrappedPrintStream.println(Ljava/lang/Object;)V
java.lang.Throwable.printEnclosedStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V -> java.lang.Throwable$WrappedPrintWriter.println(Ljava/lang/Object;)V
java.lang.Throwable.printEnclosedStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V -> java.lang.Throwable.printEnclosedStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V
java.lang.Throwable.printStackTrace()V -> java.lang.Throwable.printStackTrace(Ljava/io/PrintStream;)V
java.lang.Throwable.printStackTrace(Ljava/io/PrintStream;)V -> java.lang.Throwable.printStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;)V
java.lang.Throwable.printStackTrace(Ljava/io/PrintWriter;)V -> java.lang.Throwable.printStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;)V
java.lang.Throwable.printStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;)V -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.lang.Throwable.printStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;)V -> java.lang.Throwable$WrappedPrintStream.println(Ljava/lang/Object;)V
java.lang.Throwable.printStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;)V -> java.lang.Throwable$WrappedPrintWriter.println(Ljava/lang/Object;)V
java.lang.Throwable.printStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;)V -> java.lang.Throwable.printEnclosedStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V
java.lang.UNIXProcess$Platform.<clinit>()V -> java.lang.UNIXProcess$Platform.<init>(Ljava/lang/String;I[Ljava/lang/UNIXProcess$LaunchMechanism;)V
java.lang.UNIXProcess$Platform.<init>(Ljava/lang/String;I[Ljava/lang/UNIXProcess$LaunchMechanism;)V -> java.util.EnumSet.copyOf(Ljava/util/Collection;)Ljava/util/EnumSet;
java.lang.UNIXProcess$Platform.get()Ljava/lang/UNIXProcess$Platform; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.lang.UNIXProcess$Platform.helperPath()Ljava/lang/String; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.lang.UNIXProcess$Platform.launchMechanism()Ljava/lang/UNIXProcess$LaunchMechanism; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.lang.UNIXProcess.<clinit>()V -> java.lang.UNIXProcess$Platform.get()Ljava/lang/UNIXProcess$Platform;
java.lang.UNIXProcess.<clinit>()V -> java.lang.UNIXProcess$Platform.helperPath()Ljava/lang/String;
java.lang.UNIXProcess.<clinit>()V -> java.lang.UNIXProcess$Platform.launchMechanism()Ljava/lang/UNIXProcess$LaunchMechanism;
java.lang.UNIXProcess.<clinit>()V -> java.lang.UNIXProcess.toCString(Ljava/lang/String;)[B
java.lang.UNIXProcess.<clinit>()V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.lang.UNIXProcess.<init>([B[BI[BI[B[IZ)V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
java.lang.UNIXProcess.toCString(Ljava/lang/String;)[B -> java.lang.String.getBytes()[B
java.lang.ref.Reference$ReferenceHandler.<init>(Ljava/lang/ThreadGroup;Ljava/lang/String;)V -> java.lang.Thread.<init>(Ljava/lang/ThreadGroup;Ljava/lang/String;)V
java.lang.ref.Reference.<clinit>()V -> java.lang.Thread.setDaemon(Z)V
java.lang.ref.Reference.<clinit>()V -> java.lang.Thread.setPriority(I)V
java.lang.ref.Reference.<clinit>()V -> java.lang.Thread.start()V
java.lang.ref.Reference.<clinit>()V -> java.lang.ref.Reference$ReferenceHandler.<init>(Ljava/lang/ThreadGroup;Ljava/lang/String;)V
java.lang.ref.ReferenceQueue.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.lang.reflect.AccessibleObject.<clinit>()V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.lang.reflect.AccessibleObject.setAccessible(Z)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.lang.reflect.Modifier.<clinit>()V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.net.Inet6Address.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.net.InetAddress$1.run()Ljava/lang/Object; -> java.net.InetAddress$1.run()Ljava/lang/Void;
java.net.InetAddress$1.run()Ljava/lang/Void; -> java.lang.System.loadLibrary(Ljava/lang/String;)V
java.net.InetAddress$3.run()Ljava/lang/Object; -> java.net.InetAddress$3.run()Lsun/net/spi/nameservice/NameService;
java.net.InetAddress$3.run()Lsun/net/spi/nameservice/NameService; -> java.io.PrintStream.println(Ljava/lang/String;)V
java.net.InetAddress$3.run()Lsun/net/spi/nameservice/NameService; -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.net.InetAddress$3.run()Lsun/net/spi/nameservice/NameService; -> java.lang.Throwable.printStackTrace()V
java.net.InetAddress$3.run()Lsun/net/spi/nameservice/NameService; -> java.util.ServiceLoader$1.hasNext()Z
java.net.InetAddress$3.run()Lsun/net/spi/nameservice/NameService; -> java.util.ServiceLoader$1.next()Ljava/lang/Object;
java.net.InetAddress$3.run()Lsun/net/spi/nameservice/NameService; -> java.util.ServiceLoader.load(Ljava/lang/Class;)Ljava/util/ServiceLoader;
java.net.InetAddress$Cache.get(Ljava/lang/String;)Ljava/net/InetAddress$CacheEntry; -> java.util.HashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;
java.net.InetAddress$Cache.get(Ljava/lang/String;)Ljava/net/InetAddress$CacheEntry; -> java.util.LinkedHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;
java.net.InetAddress$Cache.put(Ljava/lang/String;[Ljava/net/InetAddress;)Ljava/net/InetAddress$Cache; -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.net.InetAddress$Cache.put(Ljava/lang/String;[Ljava/net/InetAddress;)Ljava/net/InetAddress$Cache; -> java.util.HashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;
java.net.InetAddress$Cache.put(Ljava/lang/String;[Ljava/net/InetAddress;)Ljava/net/InetAddress$Cache; -> java.util.LinkedHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;
java.net.InetAddress.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.net.InetAddress.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.net.InetAddress.<clinit>()V -> java.net.InetAddress.createNSProvider(Ljava/lang/String;)Lsun/net/spi/nameservice/NameService;
java.net.InetAddress.<clinit>()V -> java.net.InetAddressImplFactory.create()Ljava/net/InetAddressImpl;
java.net.InetAddress.<clinit>()V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.net.InetAddress.cacheAddresses(Ljava/lang/String;[Ljava/net/InetAddress;Z)V -> java.lang.String.toLowerCase()Ljava/lang/String;
java.net.InetAddress.cacheAddresses(Ljava/lang/String;[Ljava/net/InetAddress;Z)V -> java.net.InetAddress$Cache.put(Ljava/lang/String;[Ljava/net/InetAddress;)Ljava/net/InetAddress$Cache;
java.net.InetAddress.cacheAddresses(Ljava/lang/String;[Ljava/net/InetAddress;Z)V -> java.net.InetAddress.cacheInitIfNeeded()V
java.net.InetAddress.cacheInitIfNeeded()V -> java.net.InetAddress$Cache.put(Ljava/lang/String;[Ljava/net/InetAddress;)Ljava/net/InetAddress$Cache;
java.net.InetAddress.cacheInitIfNeeded()V -> java.net.InetAddress.getHostName()Ljava/lang/String;
java.net.InetAddress.checkLookupTable(Ljava/lang/String;)[Ljava/net/InetAddress; -> java.net.InetAddress.getCachedAddresses(Ljava/lang/String;)[Ljava/net/InetAddress;
java.net.InetAddress.checkLookupTable(Ljava/lang/String;)[Ljava/net/InetAddress; -> java.util.HashMap.containsKey(Ljava/lang/Object;)Z
java.net.InetAddress.checkLookupTable(Ljava/lang/String;)[Ljava/net/InetAddress; -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.net.InetAddress.createNSProvider(Ljava/lang/String;)Lsun/net/spi/nameservice/NameService; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
java.net.InetAddress.getAddressesFromNameService(Ljava/lang/String;Ljava/net/InetAddress;)[Ljava/net/InetAddress; -> java.net.InetAddress.cacheAddresses(Ljava/lang/String;[Ljava/net/InetAddress;Z)V
java.net.InetAddress.getAddressesFromNameService(Ljava/lang/String;Ljava/net/InetAddress;)[Ljava/net/InetAddress; -> java.net.InetAddress.checkLookupTable(Ljava/lang/String;)[Ljava/net/InetAddress;
java.net.InetAddress.getAddressesFromNameService(Ljava/lang/String;Ljava/net/InetAddress;)[Ljava/net/InetAddress; -> java.net.InetAddress.updateLookupTable(Ljava/lang/String;)V
java.net.InetAddress.getAllByName(Ljava/lang/String;)[Ljava/net/InetAddress; -> java.net.InetAddress.getAllByName(Ljava/lang/String;Ljava/net/InetAddress;)[Ljava/net/InetAddress;
java.net.InetAddress.getAllByName(Ljava/lang/String;Ljava/net/InetAddress;)[Ljava/net/InetAddress; -> java.net.InetAddress.getAllByName0(Ljava/lang/String;Ljava/net/InetAddress;Z)[Ljava/net/InetAddress;
java.net.InetAddress.getAllByName0(Ljava/lang/String;Ljava/net/InetAddress;Z)[Ljava/net/InetAddress; -> java.lang.SecurityManager.checkConnect(Ljava/lang/String;I)V
java.net.InetAddress.getAllByName0(Ljava/lang/String;Ljava/net/InetAddress;Z)[Ljava/net/InetAddress; -> java.net.InetAddress.getAddressesFromNameService(Ljava/lang/String;Ljava/net/InetAddress;)[Ljava/net/InetAddress;
java.net.InetAddress.getAllByName0(Ljava/lang/String;Ljava/net/InetAddress;Z)[Ljava/net/InetAddress; -> java.net.InetAddress.getCachedAddresses(Ljava/lang/String;)[Ljava/net/InetAddress;
java.net.InetAddress.getAllByName0(Ljava/lang/String;Z)[Ljava/net/InetAddress; -> java.net.InetAddress.getAllByName0(Ljava/lang/String;Ljava/net/InetAddress;Z)[Ljava/net/InetAddress;
java.net.InetAddress.getByName(Ljava/lang/String;)Ljava/net/InetAddress; -> java.net.InetAddress.getAllByName(Ljava/lang/String;)[Ljava/net/InetAddress;
java.net.InetAddress.getCachedAddresses(Ljava/lang/String;)[Ljava/net/InetAddress; -> java.lang.String.toLowerCase()Ljava/lang/String;
java.net.InetAddress.getCachedAddresses(Ljava/lang/String;)[Ljava/net/InetAddress; -> java.net.InetAddress$Cache.get(Ljava/lang/String;)Ljava/net/InetAddress$CacheEntry;
java.net.InetAddress.getCachedAddresses(Ljava/lang/String;)[Ljava/net/InetAddress; -> java.net.InetAddress.cacheInitIfNeeded()V
java.net.InetAddress.getHostFromNameService(Ljava/net/InetAddress;Z)Ljava/lang/String; -> java.lang.SecurityManager.checkConnect(Ljava/lang/String;I)V
java.net.InetAddress.getHostFromNameService(Ljava/net/InetAddress;Z)Ljava/lang/String; -> java.net.InetAddress.getAllByName0(Ljava/lang/String;Z)[Ljava/net/InetAddress;
java.net.InetAddress.getHostName()Ljava/lang/String; -> java.net.InetAddress.getHostName(Z)Ljava/lang/String;
java.net.InetAddress.getHostName(Z)Ljava/lang/String; -> java.net.InetAddress.getHostFromNameService(Ljava/net/InetAddress;Z)Ljava/lang/String;
java.net.InetAddress.loadImpl(Ljava/lang/String;)Ljava/net/InetAddressImpl; -> java.io.PrintStream.println(Ljava/lang/String;)V
java.net.InetAddress.loadImpl(Ljava/lang/String;)Ljava/net/InetAddressImpl; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.net.InetAddress.updateLookupTable(Ljava/lang/String;)V -> java.util.HashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;
java.net.InetAddressImplFactory.create()Ljava/net/InetAddressImpl; -> java.net.InetAddress.loadImpl(Ljava/lang/String;)Ljava/net/InetAddressImpl;
java.net.NetworkInterface$1.run()Ljava/lang/Object; -> java.net.NetworkInterface$1.run()Ljava/lang/Void;
java.net.NetworkInterface$1.run()Ljava/lang/Void; -> java.lang.System.loadLibrary(Ljava/lang/String;)V
java.net.NetworkInterface.<clinit>()V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.net.SocketPermission.<clinit>()V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.net.SocketPermission.<init>(Ljava/lang/String;Ljava/lang/String;)V -> java.net.SocketPermission.init(Ljava/lang/String;I)V
java.net.SocketPermission.equals(Ljava/lang/Object;)Z -> java.net.SocketPermission.getCanonName()V
java.net.SocketPermission.getCanonName()V -> java.lang.String.toLowerCase()Ljava/lang/String;
java.net.SocketPermission.getCanonName()V -> java.net.InetAddress.getByName(Ljava/lang/String;)Ljava/net/InetAddress;
java.net.SocketPermission.getCanonName()V -> java.net.InetAddress.getHostName(Z)Ljava/lang/String;
java.net.SocketPermission.getCanonName()V -> java.net.SocketPermission.getIP()V
java.net.SocketPermission.getIP()V -> java.net.InetAddress.getAllByName0(Ljava/lang/String;Z)[Ljava/net/InetAddress;
java.net.SocketPermission.hashCode()I -> java.net.SocketPermission.getCanonName()V
java.net.SocketPermission.init(Ljava/lang/String;I)V -> java.lang.String.toLowerCase()Ljava/lang/String;
java.net.SocketPermissionCollection.add(Ljava/security/Permission;)V -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.net.URL.<init>(Ljava/lang/String;)V -> java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;)V
java.net.URL.<init>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V -> java.net.URL.<init>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/net/URLStreamHandler;)V
java.net.URL.<init>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/net/URLStreamHandler;)V -> java.lang.String.toLowerCase()Ljava/lang/String;
java.net.URL.<init>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/net/URLStreamHandler;)V -> java.net.URL.checkSpecifyHandler(Ljava/lang/SecurityManager;)V
java.net.URL.<init>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/net/URLStreamHandler;)V -> java.net.URL.getURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler;
java.net.URL.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V -> java.net.URL.<init>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;)V -> java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V
java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V -> java.lang.String.toLowerCase()Ljava/lang/String;
java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V -> java.net.URL.checkSpecifyHandler(Ljava/lang/SecurityManager;)V
java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V -> java.net.URL.getURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler;
java.net.URL.checkSpecifyHandler(Ljava/lang/SecurityManager;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.net.URL.getURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler; -> java.lang.ClassLoader.getSystemClassLoader()Ljava/lang/ClassLoader;
java.net.URL.getURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.net.URL.getURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler; -> java.util.Hashtable.get(Ljava/lang/Object;)Ljava/lang/Object;
java.net.URL.getURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler; -> java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.net.URLClassLoader$1.run()Ljava/lang/Class; -> java.net.URLClassLoader.access$100(Ljava/net/URLClassLoader;Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;
java.net.URLClassLoader$1.run()Ljava/lang/Object; -> java.net.URLClassLoader$1.run()Ljava/lang/Class;
java.net.URLClassLoader$4.run()Ljava/lang/Object; -> java.net.URLClassLoader$4.run()Ljava/lang/Void;
java.net.URLClassLoader$4.run()Ljava/lang/Void; -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.net.URLClassLoader.<init>([Ljava/net/URL;Ljava/lang/ClassLoader;)V -> java.lang.SecurityManager.checkCreateClassLoader()V
java.net.URLClassLoader.<init>([Ljava/net/URL;Ljava/lang/ClassLoader;)V -> java.security.SecureClassLoader.<init>(Ljava/lang/ClassLoader;)V
java.net.URLClassLoader.access$100(Ljava/net/URLClassLoader;Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class; -> java.net.URLClassLoader.defineClass(Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;
java.net.URLClassLoader.defineClass(Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class; -> java.net.URLClassLoader.definePackageInternal(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;)V
java.net.URLClassLoader.defineClass(Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class; -> java.security.SecureClassLoader.defineClass(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/CodeSource;)Ljava/lang/Class;
java.net.URLClassLoader.defineClass(Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class; -> java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class;
java.net.URLClassLoader.definePackage(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;)Ljava/lang/Package; -> java.lang.ClassLoader.definePackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package;
java.net.URLClassLoader.definePackageInternal(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;)V -> java.lang.AssertionError.<init>(Ljava/lang/Object;)V
java.net.URLClassLoader.definePackageInternal(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;)V -> java.lang.ClassLoader.definePackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package;
java.net.URLClassLoader.definePackageInternal(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;)V -> java.net.URLClassLoader.definePackage(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;)Ljava/lang/Package;
java.net.URLClassLoader.definePackageInternal(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;)V -> java.net.URLClassLoader.getAndVerifyPackage(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;)Ljava/lang/Package;
java.net.URLClassLoader.findClass(Ljava/lang/String;)Ljava/lang/Class; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;
java.net.URLClassLoader.getAndVerifyPackage(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;)Ljava/lang/Package; -> java.lang.ClassLoader.getPackage(Ljava/lang/String;)Ljava/lang/Package;
java.net.URLClassLoader.getPermissions(Ljava/security/CodeSource;)Ljava/security/PermissionCollection; -> java.io.FilePermission.<init>(Ljava/lang/String;Ljava/lang/String;)V
java.net.URLClassLoader.getPermissions(Ljava/security/CodeSource;)Ljava/security/PermissionCollection; -> java.net.SocketPermission.<init>(Ljava/lang/String;Ljava/lang/String;)V
java.net.URLClassLoader.getPermissions(Ljava/security/CodeSource;)Ljava/security/PermissionCollection; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;
java.net.URLClassLoader.getPermissions(Ljava/security/CodeSource;)Ljava/security/PermissionCollection; -> java.security.Permissions.add(Ljava/security/Permission;)V
java.nio.Bits.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.nio.charset.Charset$1.<init>()V -> java.lang.ClassLoader.getSystemClassLoader()Ljava/lang/ClassLoader;
java.nio.charset.Charset$1.<init>()V -> java.util.ServiceLoader.load(Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/ServiceLoader;
java.nio.charset.Charset$1.getNext()Z -> java.util.ServiceLoader$1.hasNext()Z
java.nio.charset.Charset$1.getNext()Z -> java.util.ServiceLoader$1.next()Ljava/lang/Object;
java.nio.charset.Charset$1.hasNext()Z -> java.nio.charset.Charset$1.getNext()Z
java.nio.charset.Charset$1.next()Ljava/lang/Object; -> java.nio.charset.Charset$1.next()Ljava/nio/charset/spi/CharsetProvider;
java.nio.charset.Charset$1.next()Ljava/nio/charset/spi/CharsetProvider; -> java.nio.charset.Charset$1.getNext()Z
java.nio.charset.Charset$2.run()Ljava/lang/Object; -> java.nio.charset.Charset$2.run()Ljava/nio/charset/Charset;
java.nio.charset.Charset$2.run()Ljava/nio/charset/Charset; -> java.nio.charset.Charset$1.hasNext()Z
java.nio.charset.Charset$2.run()Ljava/nio/charset/Charset; -> java.nio.charset.Charset$1.next()Ljava/lang/Object;
java.nio.charset.Charset$2.run()Ljava/nio/charset/Charset; -> java.nio.charset.Charset.access$000()Ljava/util/Iterator;
java.nio.charset.Charset$ExtendedProviderHolder.<clinit>()V -> java.nio.charset.Charset$ExtendedProviderHolder.extendedProvider()Ljava/nio/charset/spi/CharsetProvider;
java.nio.charset.Charset$ExtendedProviderHolder.extendedProvider()Ljava/nio/charset/spi/CharsetProvider; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.nio.charset.Charset.access$000()Ljava/util/Iterator; -> java.nio.charset.Charset.providers()Ljava/util/Iterator;
java.nio.charset.Charset.atBugLevel(Ljava/lang/String;)Z -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.nio.charset.Charset.checkName(Ljava/lang/String;)V -> java.nio.charset.Charset.atBugLevel(Ljava/lang/String;)Z
java.nio.charset.Charset.checkName(Ljava/lang/String;)V -> java.nio.charset.IllegalCharsetNameException.<init>(Ljava/lang/String;)V
java.nio.charset.Charset.defaultCharset()Ljava/nio/charset/Charset; -> java.nio.charset.Charset.forName(Ljava/lang/String;)Ljava/nio/charset/Charset;
java.nio.charset.Charset.defaultCharset()Ljava/nio/charset/Charset; -> java.nio.charset.Charset.lookup(Ljava/lang/String;)Ljava/nio/charset/Charset;
java.nio.charset.Charset.defaultCharset()Ljava/nio/charset/Charset; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.nio.charset.Charset.forName(Ljava/lang/String;)Ljava/nio/charset/Charset; -> java.nio.charset.Charset.lookup(Ljava/lang/String;)Ljava/nio/charset/Charset;
java.nio.charset.Charset.forName(Ljava/lang/String;)Ljava/nio/charset/Charset; -> java.nio.charset.UnsupportedCharsetException.<init>(Ljava/lang/String;)V
java.nio.charset.Charset.isSupported(Ljava/lang/String;)Z -> java.nio.charset.Charset.lookup(Ljava/lang/String;)Ljava/nio/charset/Charset;
java.nio.charset.Charset.lookup(Ljava/lang/String;)Ljava/nio/charset/Charset; -> java.nio.charset.Charset.lookup2(Ljava/lang/String;)Ljava/nio/charset/Charset;
java.nio.charset.Charset.lookup2(Ljava/lang/String;)Ljava/nio/charset/Charset; -> java.nio.charset.Charset.checkName(Ljava/lang/String;)V
java.nio.charset.Charset.lookup2(Ljava/lang/String;)Ljava/nio/charset/Charset; -> java.nio.charset.Charset.lookupViaProviders(Ljava/lang/String;)Ljava/nio/charset/Charset;
java.nio.charset.Charset.lookupViaProviders(Ljava/lang/String;)Ljava/nio/charset/Charset; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.nio.charset.Charset.providers()Ljava/util/Iterator; -> java.nio.charset.Charset$1.<init>()V
java.nio.charset.IllegalCharsetNameException.<init>(Ljava/lang/String;)V -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
java.nio.charset.StandardCharsets.<clinit>()V -> java.nio.charset.Charset.forName(Ljava/lang/String;)Ljava/nio/charset/Charset;
java.nio.charset.UnsupportedCharsetException.<init>(Ljava/lang/String;)V -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
java.security.AccessControlContext$1.run()Ljava/lang/Object; -> java.security.AccessControlContext$1.run()Ljava/lang/Void;
java.security.AccessControlContext$1.run()Ljava/lang/Void; -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.security.AccessControlContext.checkPermission(Ljava/security/Permission;)V -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.security.AccessControlContext.checkPermission(Ljava/security/Permission;)V -> java.lang.Thread.dumpStack()V
java.security.AccessControlContext.checkPermission(Ljava/security/Permission;)V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.security.AccessController.checkPermission(Ljava/security/Permission;)V -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.security.AccessController.checkPermission(Ljava/security/Permission;)V -> java.lang.Thread.dumpStack()V
java.security.AccessController.checkPermission(Ljava/security/Permission;)V -> java.security.AccessControlContext.checkPermission(Ljava/security/Permission;)V
java.security.AllPermissionCollection.add(Ljava/security/Permission;)V -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.security.CodeSource.toString()Ljava/lang/String; -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.security.PermissionCollection.toString()Ljava/lang/String; -> java.lang.Object.toString()Ljava/lang/String;
java.security.PermissionCollection.toString()Ljava/lang/String; -> java.security.Permissions.elements()Ljava/util/Enumeration;
java.security.PermissionCollection.toString()Ljava/lang/String; -> java.security.PermissionsEnumerator.hasMoreElements()Z
java.security.PermissionCollection.toString()Ljava/lang/String; -> java.security.PermissionsEnumerator.nextElement()Ljava/lang/Object;
java.security.Permissions.add(Ljava/security/Permission;)V -> java.io.FilePermissionCollection.add(Ljava/security/Permission;)V
java.security.Permissions.add(Ljava/security/Permission;)V -> java.net.SocketPermissionCollection.add(Ljava/security/Permission;)V
java.security.Permissions.add(Ljava/security/Permission;)V -> java.security.AllPermissionCollection.add(Ljava/security/Permission;)V
java.security.Permissions.add(Ljava/security/Permission;)V -> java.security.Permissions.add(Ljava/security/Permission;)V
java.security.Permissions.add(Ljava/security/Permission;)V -> java.security.Permissions.getPermissionCollection(Ljava/security/Permission;Z)Ljava/security/PermissionCollection;
java.security.Permissions.add(Ljava/security/Permission;)V -> java.security.PermissionsHash.add(Ljava/security/Permission;)V
java.security.Permissions.add(Ljava/security/Permission;)V -> org.eclipse.equinox.launcher.Main$1.add(Ljava/security/Permission;)V
java.security.Permissions.elements()Ljava/util/Enumeration; -> java.security.PermissionsEnumerator.<init>(Ljava/util/Iterator;)V
java.security.Permissions.getPermissionCollection(Ljava/security/Permission;Z)Ljava/security/PermissionCollection; -> java.security.Permissions.getUnresolvedPermissions(Ljava/security/Permission;)Ljava/security/PermissionCollection;
java.security.Permissions.getPermissionCollection(Ljava/security/Permission;Z)Ljava/security/PermissionCollection; -> java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object;
java.security.Permissions.getPermissionCollection(Ljava/security/Permission;Z)Ljava/security/PermissionCollection; -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.security.Permissions.getUnresolvedPermissions(Ljava/security/Permission;)Ljava/security/PermissionCollection; -> java.io.FilePermissionCollection.add(Ljava/security/Permission;)V
java.security.Permissions.getUnresolvedPermissions(Ljava/security/Permission;)Ljava/security/PermissionCollection; -> java.net.SocketPermissionCollection.add(Ljava/security/Permission;)V
java.security.Permissions.getUnresolvedPermissions(Ljava/security/Permission;)Ljava/security/PermissionCollection; -> java.security.AllPermissionCollection.add(Ljava/security/Permission;)V
java.security.Permissions.getUnresolvedPermissions(Ljava/security/Permission;)Ljava/security/PermissionCollection; -> java.security.PermissionsHash.add(Ljava/security/Permission;)V
java.security.Permissions.getUnresolvedPermissions(Ljava/security/Permission;)Ljava/security/PermissionCollection; -> java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object;
java.security.PermissionsEnumerator.<init>(Ljava/util/Iterator;)V -> java.security.PermissionsEnumerator.getNextEnumWithMore()Ljava/util/Enumeration;
java.security.PermissionsEnumerator.getNextEnumWithMore()Ljava/util/Enumeration; -> java.security.Permissions.elements()Ljava/util/Enumeration;
java.security.PermissionsEnumerator.getNextEnumWithMore()Ljava/util/Enumeration; -> java.security.PermissionsEnumerator.hasMoreElements()Z
java.security.PermissionsEnumerator.getNextEnumWithMore()Ljava/util/Enumeration; -> org.eclipse.equinox.launcher.Main$1.elements()Ljava/util/Enumeration;
java.security.PermissionsEnumerator.getNextEnumWithMore()Ljava/util/Enumeration; -> org.eclipse.equinox.launcher.Main$2.hasMoreElements()Z
java.security.PermissionsEnumerator.hasMoreElements()Z -> java.security.PermissionsEnumerator.getNextEnumWithMore()Ljava/util/Enumeration;
java.security.PermissionsEnumerator.hasMoreElements()Z -> java.security.PermissionsEnumerator.hasMoreElements()Z
java.security.PermissionsEnumerator.hasMoreElements()Z -> org.eclipse.equinox.launcher.Main$2.hasMoreElements()Z
java.security.PermissionsEnumerator.nextElement()Ljava/lang/Object; -> java.security.PermissionsEnumerator.nextElement()Ljava/security/Permission;
java.security.PermissionsEnumerator.nextElement()Ljava/security/Permission; -> java.security.PermissionsEnumerator.hasMoreElements()Z
java.security.PermissionsEnumerator.nextElement()Ljava/security/Permission; -> java.security.PermissionsEnumerator.nextElement()Ljava/lang/Object;
java.security.PermissionsEnumerator.nextElement()Ljava/security/Permission; -> org.eclipse.equinox.launcher.Main$2.nextElement()Ljava/lang/Object;
java.security.PermissionsHash.add(Ljava/security/Permission;)V -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.security.Policy$1.run()Ljava/lang/Object; -> java.security.Policy$1.run()Ljava/lang/String;
java.security.Policy$1.run()Ljava/lang/String; -> java.security.Security.getProperty(Ljava/lang/String;)Ljava/lang/String;
java.security.Policy$2.run()Ljava/lang/Object; -> java.security.Policy$2.run()Ljava/security/Policy;
java.security.Policy$2.run()Ljava/security/Policy; -> java.lang.Class.forName(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;
java.security.Policy$2.run()Ljava/security/Policy; -> java.lang.ClassLoader.getSystemClassLoader()Ljava/lang/ClassLoader;
java.security.Policy$2.run()Ljava/security/Policy; -> java.lang.Throwable.printStackTrace()V
java.security.Policy$3.run()Ljava/lang/Object; -> java.security.Policy$3.run()Ljava/security/ProtectionDomain;
java.security.Policy$3.run()Ljava/security/ProtectionDomain; -> java.lang.Class.getProtectionDomain()Ljava/security/ProtectionDomain;
java.security.Policy.getPolicy()Ljava/security/Policy; -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.security.Policy.getPolicy()Ljava/security/Policy; -> java.security.Policy.getPolicyNoCheck()Ljava/security/Policy;
java.security.Policy.getPolicyNoCheck()Ljava/security/Policy; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.security.Policy.initPolicy(Ljava/security/Policy;)V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.security.Policy.initPolicy(Ljava/security/Policy;)V -> java.security.Permissions.add(Ljava/security/Permission;)V
java.security.Policy.initPolicy(Ljava/security/Policy;)V -> org.eclipse.equinox.launcher.Main$EclipsePolicy.getPermissions(Ljava/security/ProtectionDomain;)Ljava/security/PermissionCollection;
java.security.Policy.setPolicy(Ljava/security/Policy;)V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.security.Policy.setPolicy(Ljava/security/Policy;)V -> java.security.Policy.initPolicy(Ljava/security/Policy;)V
java.security.ProtectionDomain$2.run()Ljava/lang/Object; -> java.security.ProtectionDomain$2.run()Ljava/security/PermissionCollection;
java.security.ProtectionDomain$2.run()Ljava/security/PermissionCollection; -> java.security.Policy.getPolicyNoCheck()Ljava/security/Policy;
java.security.ProtectionDomain$2.run()Ljava/security/PermissionCollection; -> org.eclipse.equinox.launcher.Main$EclipsePolicy.getPermissions(Ljava/security/ProtectionDomain;)Ljava/security/PermissionCollection;
java.security.ProtectionDomain.mergePermissions()Ljava/security/PermissionCollection; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.security.ProtectionDomain.mergePermissions()Ljava/security/PermissionCollection; -> java.security.Permissions.add(Ljava/security/Permission;)V
java.security.ProtectionDomain.mergePermissions()Ljava/security/PermissionCollection; -> java.security.Permissions.elements()Ljava/util/Enumeration;
java.security.ProtectionDomain.mergePermissions()Ljava/security/PermissionCollection; -> java.security.PermissionsEnumerator.hasMoreElements()Z
java.security.ProtectionDomain.mergePermissions()Ljava/security/PermissionCollection; -> java.security.PermissionsEnumerator.nextElement()Ljava/lang/Object;
java.security.ProtectionDomain.mergePermissions()Ljava/security/PermissionCollection; -> org.eclipse.equinox.launcher.Main$1.elements()Ljava/util/Enumeration;
java.security.ProtectionDomain.mergePermissions()Ljava/security/PermissionCollection; -> org.eclipse.equinox.launcher.Main$2.hasMoreElements()Z
java.security.ProtectionDomain.mergePermissions()Ljava/security/PermissionCollection; -> org.eclipse.equinox.launcher.Main$2.nextElement()Ljava/lang/Object;
java.security.ProtectionDomain.seeAllp()Z -> java.lang.Class.getClassLoader()Ljava/lang/ClassLoader;
java.security.ProtectionDomain.seeAllp()Z -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.security.ProtectionDomain.seeAllp()Z -> java.security.Policy.getPolicyNoCheck()Ljava/security/Policy;
java.security.ProtectionDomain.toString()Ljava/lang/String; -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.security.ProtectionDomain.toString()Ljava/lang/String; -> java.security.ProtectionDomain.mergePermissions()Ljava/security/PermissionCollection;
java.security.ProtectionDomain.toString()Ljava/lang/String; -> java.security.ProtectionDomain.seeAllp()Z
java.security.SecureClassLoader.<init>(Ljava/lang/ClassLoader;)V -> java.lang.ClassLoader.<init>(Ljava/lang/ClassLoader;)V
java.security.SecureClassLoader.<init>(Ljava/lang/ClassLoader;)V -> java.lang.SecurityManager.checkCreateClassLoader()V
java.security.SecureClassLoader.defineClass(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/CodeSource;)Ljava/lang/Class; -> java.lang.ClassLoader.defineClass(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class;
java.security.SecureClassLoader.defineClass(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/CodeSource;)Ljava/lang/Class; -> java.security.SecureClassLoader.getProtectionDomain(Ljava/security/CodeSource;)Ljava/security/ProtectionDomain;
java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; -> java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;
java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; -> java.security.SecureClassLoader.getProtectionDomain(Ljava/security/CodeSource;)Ljava/security/ProtectionDomain;
java.security.SecureClassLoader.getProtectionDomain(Ljava/security/CodeSource;)Ljava/security/ProtectionDomain; -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.security.SecureClassLoader.getProtectionDomain(Ljava/security/CodeSource;)Ljava/security/ProtectionDomain; -> java.net.URLClassLoader.getPermissions(Ljava/security/CodeSource;)Ljava/security/PermissionCollection;
java.security.SecureClassLoader.getProtectionDomain(Ljava/security/CodeSource;)Ljava/security/ProtectionDomain; -> java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object;
java.security.SecureClassLoader.getProtectionDomain(Ljava/security/CodeSource;)Ljava/security/ProtectionDomain; -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.security.Security$1.run()Ljava/lang/Object; -> java.security.Security$1.run()Ljava/lang/Void;
java.security.Security$1.run()Ljava/lang/Void; -> java.security.Security.access$000()V
java.security.Security.<clinit>()V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.security.Security.access$000()V -> java.security.Security.initialize()V
java.security.Security.getProperty(Ljava/lang/String;)Ljava/lang/String; -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.security.Security.getProperty(Ljava/lang/String;)Ljava/lang/String; -> java.util.Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;
java.security.Security.initialize()V -> java.io.File.exists()Z
java.security.Security.initialize()V -> java.io.File.getCanonicalPath()Ljava/lang/String;
java.security.Security.initialize()V -> java.io.FileInputStream.<init>(Ljava/io/File;)V
java.security.Security.initialize()V -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.security.Security.initialize()V -> java.lang.Throwable.printStackTrace()V
java.security.Security.initialize()V -> java.net.URL.<init>(Ljava/lang/String;)V
java.security.Security.initialize()V -> java.security.Security.initializeStatic()V
java.security.Security.initialize()V -> java.util.Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;
java.security.Security.initialize()V -> java.util.Properties.load(Ljava/io/InputStream;)V
java.security.Security.initializeStatic()V -> java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.util.AbstractCollection.containsAll(Ljava/util/Collection;)Z -> java.util.HashSet.contains(Ljava/lang/Object;)Z
java.util.AbstractSet.equals(Ljava/lang/Object;)Z -> java.util.AbstractCollection.containsAll(Ljava/util/Collection;)Z
java.util.AbstractSet.hashCode()I -> java.net.SocketPermission.hashCode()I
java.util.ArrayDeque.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.Arrays.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.BitSet.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.Calendar.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.Calendar.complete()V -> java.util.Calendar.updateTime()V
java.util.Calendar.complete()V -> java.util.GregorianCalendar.computeFields()V
java.util.Calendar.createCalendar(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar; -> java.util.GregorianCalendar.<init>(Ljava/util/TimeZone;Ljava/util/Locale;)V
java.util.Calendar.createCalendar(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar; -> java.util.JapaneseImperialCalendar.<init>(Ljava/util/TimeZone;Ljava/util/Locale;)V
java.util.Calendar.get(I)I -> java.util.Calendar.complete()V
java.util.Calendar.getInstance()Ljava/util/Calendar; -> java.util.Calendar.createCalendar(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;
java.util.Calendar.getInstance()Ljava/util/Calendar; -> java.util.Locale.getDefault(Ljava/util/Locale$Category;)Ljava/util/Locale;
java.util.Calendar.getInstance()Ljava/util/Calendar; -> java.util.TimeZone.getDefault()Ljava/util/TimeZone;
java.util.Calendar.getTimeInMillis()J -> java.util.Calendar.updateTime()V
java.util.Calendar.set(II)V -> java.util.GregorianCalendar.computeFields()V
java.util.Calendar.set(IIIIII)V -> java.util.Calendar.set(II)V
java.util.Calendar.setTime(Ljava/util/Date;)V -> java.util.Calendar.setTimeInMillis(J)V
java.util.Calendar.setTime(Ljava/util/Date;)V -> java.util.Date.getTime()J
java.util.Calendar.setTimeInMillis(J)V -> java.util.GregorianCalendar.computeFields()V
java.util.Calendar.updateTime()V -> java.util.GregorianCalendar.computeTime()V
java.util.Collections$UnmodifiableMap.get(Ljava/lang/Object;)Ljava/lang/Object; -> java.lang.ProcessEnvironment$StringEnvironment.get(Ljava/lang/Object;)Ljava/lang/Object;
java.util.Date.<init>(IIIIII)V -> java.util.Date.getTimeImpl()J
java.util.Date.<init>(IIIIII)V -> java.util.TimeZone.getDefaultRef()Ljava/util/TimeZone;
java.util.Date.getCalendarSystem(J)Lsun/util/calendar/BaseCalendar; -> java.util.TimeZone.getDefaultRef()Ljava/util/TimeZone;
java.util.Date.getTime()J -> java.util.Date.getTimeImpl()J
java.util.Date.getTimeImpl()J -> java.util.Date.normalize()Lsun/util/calendar/BaseCalendar$Date;
java.util.Date.normalize()Lsun/util/calendar/BaseCalendar$Date; -> java.util.Date.getCalendarSystem(J)Lsun/util/calendar/BaseCalendar;
java.util.Date.normalize()Lsun/util/calendar/BaseCalendar$Date; -> java.util.Date.normalize(Lsun/util/calendar/BaseCalendar$Date;)Lsun/util/calendar/BaseCalendar$Date;
java.util.Date.normalize()Lsun/util/calendar/BaseCalendar$Date; -> java.util.TimeZone.getDefaultRef()Ljava/util/TimeZone;
java.util.Date.normalize(Lsun/util/calendar/BaseCalendar$Date;)Lsun/util/calendar/BaseCalendar$Date; -> java.util.Calendar.getTimeInMillis()J
java.util.Date.normalize(Lsun/util/calendar/BaseCalendar$Date;)Lsun/util/calendar/BaseCalendar$Date; -> java.util.Calendar.set(II)V
java.util.Date.normalize(Lsun/util/calendar/BaseCalendar$Date;)Lsun/util/calendar/BaseCalendar$Date; -> java.util.Calendar.set(IIIIII)V
java.util.Date.normalize(Lsun/util/calendar/BaseCalendar$Date;)Lsun/util/calendar/BaseCalendar$Date; -> java.util.Date.getCalendarSystem(J)Lsun/util/calendar/BaseCalendar;
java.util.Date.normalize(Lsun/util/calendar/BaseCalendar$Date;)Lsun/util/calendar/BaseCalendar$Date; -> java.util.GregorianCalendar.<init>(Ljava/util/TimeZone;)V
java.util.Date.toString()Ljava/lang/String; -> java.util.Date.normalize()Lsun/util/calendar/BaseCalendar$Date;
java.util.EnumSet.copyOf(Ljava/util/Collection;)Ljava/util/EnumSet; -> java.util.EnumSet.of(Ljava/lang/Enum;)Ljava/util/EnumSet;
java.util.EnumSet.copyOf(Ljava/util/Collection;)Ljava/util/EnumSet; -> java.util.JumboEnumSet.add(Ljava/lang/Object;)Z
java.util.EnumSet.copyOf(Ljava/util/Collection;)Ljava/util/EnumSet; -> java.util.RegularEnumSet.add(Ljava/lang/Object;)Z
java.util.EnumSet.noneOf(Ljava/lang/Class;)Ljava/util/EnumSet; -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.util.EnumSet.of(Ljava/lang/Enum;)Ljava/util/EnumSet; -> java.util.EnumSet.noneOf(Ljava/lang/Class;)Ljava/util/EnumSet;
java.util.EnumSet.of(Ljava/lang/Enum;)Ljava/util/EnumSet; -> java.util.JumboEnumSet.add(Ljava/lang/Object;)Z
java.util.EnumSet.of(Ljava/lang/Enum;)Ljava/util/EnumSet; -> java.util.RegularEnumSet.add(Ljava/lang/Object;)Z
java.util.EnumSet.typeCheck(Ljava/lang/Enum;)V -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.util.GregorianCalendar.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.GregorianCalendar.<init>(Ljava/util/TimeZone;)V -> java.util.GregorianCalendar.<init>(Ljava/util/TimeZone;Ljava/util/Locale;)V
java.util.GregorianCalendar.<init>(Ljava/util/TimeZone;)V -> java.util.Locale.getDefault(Ljava/util/Locale$Category;)Ljava/util/Locale;
java.util.GregorianCalendar.<init>(Ljava/util/TimeZone;Ljava/util/Locale;)V -> java.util.Calendar.setTimeInMillis(J)V
java.util.GregorianCalendar.add(II)V -> java.util.Calendar.complete()V
java.util.GregorianCalendar.add(II)V -> java.util.Calendar.set(II)V
java.util.GregorianCalendar.add(II)V -> java.util.Calendar.setTimeInMillis(J)V
java.util.GregorianCalendar.add(II)V -> java.util.GregorianCalendar.pinDayOfMonth()V
java.util.GregorianCalendar.computeFields()V -> java.util.GregorianCalendar.computeFields(II)I
java.util.GregorianCalendar.computeFields(II)I -> java.lang.AssertionError.<init>(Ljava/lang/Object;)V
java.util.GregorianCalendar.computeFields(II)I -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.util.GregorianCalendar.computeTime()V -> java.util.GregorianCalendar.computeFields(II)I
java.util.GregorianCalendar.computeTime()V -> java.util.GregorianCalendar.getMaximum(I)I
java.util.GregorianCalendar.getActualMaximum(I)I -> java.util.Calendar.get(I)I
java.util.GregorianCalendar.getActualMaximum(I)I -> java.util.Calendar.getTimeInMillis()J
java.util.GregorianCalendar.getActualMaximum(I)I -> java.util.Calendar.set(II)V
java.util.GregorianCalendar.getActualMaximum(I)I -> java.util.Calendar.setTimeInMillis(J)V
java.util.GregorianCalendar.getActualMaximum(I)I -> java.util.GregorianCalendar.add(II)V
java.util.GregorianCalendar.getActualMaximum(I)I -> java.util.GregorianCalendar.getActualMaximum(I)I
java.util.GregorianCalendar.getActualMaximum(I)I -> java.util.GregorianCalendar.getActualMinimum(I)I
java.util.GregorianCalendar.getActualMaximum(I)I -> java.util.GregorianCalendar.getMaximum(I)I
java.util.GregorianCalendar.getActualMaximum(I)I -> java.util.GregorianCalendar.getNormalizedCalendar()Ljava/util/GregorianCalendar;
java.util.GregorianCalendar.getActualMaximum(I)I -> java.util.GregorianCalendar.getWeekYear()I
java.util.GregorianCalendar.getActualMinimum(I)I -> java.util.GregorianCalendar.getNormalizedCalendar()Ljava/util/GregorianCalendar;
java.util.GregorianCalendar.getMaximum(I)I -> java.util.Calendar.setTimeInMillis(J)V
java.util.GregorianCalendar.getMaximum(I)I -> java.util.GregorianCalendar.getActualMaximum(I)I
java.util.GregorianCalendar.getNormalizedCalendar()Ljava/util/GregorianCalendar; -> java.util.Calendar.complete()V
java.util.GregorianCalendar.getWeekYear()I -> java.util.Calendar.complete()V
java.util.GregorianCalendar.getWeekYear()I -> java.util.Calendar.get(I)I
java.util.GregorianCalendar.getWeekYear()I -> java.util.Calendar.set(II)V
java.util.GregorianCalendar.getWeekYear()I -> java.util.GregorianCalendar.add(II)V
java.util.GregorianCalendar.getWeekYear()I -> java.util.GregorianCalendar.getActualMaximum(I)I
java.util.GregorianCalendar.pinDayOfMonth()V -> java.util.Calendar.set(II)V
java.util.GregorianCalendar.pinDayOfMonth()V -> java.util.GregorianCalendar.getActualMaximum(I)I
java.util.GregorianCalendar.pinDayOfMonth()V -> java.util.GregorianCalendar.getNormalizedCalendar()Ljava/util/GregorianCalendar;
java.util.HashMap$TreeNode.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.HashMap$TreeNode.find(ILjava/lang/Object;Ljava/lang/Class;)Ljava/util/HashMap$TreeNode; -> java.net.SocketPermission.equals(Ljava/lang/Object;)Z
java.util.HashMap$TreeNode.find(ILjava/lang/Object;Ljava/lang/Class;)Ljava/util/HashMap$TreeNode; -> java.util.HashMap$TreeNode.find(ILjava/lang/Object;Ljava/lang/Class;)Ljava/util/HashMap$TreeNode;
java.util.HashMap$TreeNode.getTreeNode(ILjava/lang/Object;)Ljava/util/HashMap$TreeNode; -> java.util.HashMap$TreeNode.find(ILjava/lang/Object;Ljava/lang/Class;)Ljava/util/HashMap$TreeNode;
java.util.HashMap$TreeNode.putTreeVal(Ljava/util/HashMap;[Ljava/util/HashMap$Node;ILjava/lang/Object;Ljava/lang/Object;)Ljava/util/HashMap$TreeNode; -> java.net.SocketPermission.equals(Ljava/lang/Object;)Z
java.util.HashMap$TreeNode.putTreeVal(Ljava/util/HashMap;[Ljava/util/HashMap$Node;ILjava/lang/Object;Ljava/lang/Object;)Ljava/util/HashMap$TreeNode; -> java.util.HashMap$TreeNode.find(ILjava/lang/Object;Ljava/lang/Class;)Ljava/util/HashMap$TreeNode;
java.util.HashMap.<init>(Ljava/util/Map;)V -> java.util.HashMap.putMapEntries(Ljava/util/Map;Z)V
java.util.HashMap.containsKey(Ljava/lang/Object;)Z -> java.util.HashMap.getNode(ILjava/lang/Object;)Ljava/util/HashMap$Node;
java.util.HashMap.containsKey(Ljava/lang/Object;)Z -> java.util.HashMap.hash(Ljava/lang/Object;)I
java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object; -> java.util.HashMap.getNode(ILjava/lang/Object;)Ljava/util/HashMap$Node;
java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object; -> java.util.HashMap.hash(Ljava/lang/Object;)I
java.util.HashMap.getNode(ILjava/lang/Object;)Ljava/util/HashMap$Node; -> java.net.SocketPermission.equals(Ljava/lang/Object;)Z
java.util.HashMap.getNode(ILjava/lang/Object;)Ljava/util/HashMap$Node; -> java.util.HashMap$TreeNode.getTreeNode(ILjava/lang/Object;)Ljava/util/HashMap$TreeNode;
java.util.HashMap.hash(Ljava/lang/Object;)I -> java.net.SocketPermission.hashCode()I
java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; -> java.util.HashMap.hash(Ljava/lang/Object;)I
java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; -> java.util.HashMap.putVal(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;
java.util.HashMap.putMapEntries(Ljava/util/Map;Z)V -> java.util.HashMap.hash(Ljava/lang/Object;)I
java.util.HashMap.putMapEntries(Ljava/util/Map;Z)V -> java.util.HashMap.putVal(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;
java.util.HashMap.putVal(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object; -> java.net.SocketPermission.equals(Ljava/lang/Object;)Z
java.util.HashMap.putVal(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object; -> java.util.HashMap$TreeNode.putTreeVal(Ljava/util/HashMap;[Ljava/util/HashMap$Node;ILjava/lang/Object;Ljava/lang/Object;)Ljava/util/HashMap$TreeNode;
java.util.HashMap.putVal(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object; -> java.util.LinkedHashMap.afterNodeInsertion(Z)V
java.util.HashMap.remove(Ljava/lang/Object;)Ljava/lang/Object; -> java.util.HashMap.hash(Ljava/lang/Object;)I
java.util.HashMap.remove(Ljava/lang/Object;)Ljava/lang/Object; -> java.util.HashMap.removeNode(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/util/HashMap$Node;
java.util.HashMap.removeNode(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/util/HashMap$Node; -> java.net.SocketPermission.equals(Ljava/lang/Object;)Z
java.util.HashMap.removeNode(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/util/HashMap$Node; -> java.util.HashMap$TreeNode.getTreeNode(ILjava/lang/Object;)Ljava/util/HashMap$TreeNode;
java.util.HashSet.add(Ljava/lang/Object;)Z -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.util.HashSet.contains(Ljava/lang/Object;)Z -> java.util.HashMap.containsKey(Ljava/lang/Object;)Z
java.util.HashSet.remove(Ljava/lang/Object;)Z -> java.util.HashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;
java.util.Hashtable$Entry.equals(Ljava/lang/Object;)Z -> java.util.AbstractSet.equals(Ljava/lang/Object;)Z
java.util.Hashtable$Entry.equals(Ljava/lang/Object;)Z -> java.util.Hashtable$Entry.equals(Ljava/lang/Object;)Z
java.util.Hashtable$Entry.hashCode()I -> java.util.Objects.hashCode(Ljava/lang/Object;)I
java.util.Hashtable.addEntry(ILjava/lang/Object;Ljava/lang/Object;I)V -> java.util.AbstractSet.hashCode()I
java.util.Hashtable.addEntry(ILjava/lang/Object;Ljava/lang/Object;I)V -> java.util.Hashtable$Entry.hashCode()I
java.util.Hashtable.contains(Ljava/lang/Object;)Z -> java.util.AbstractSet.equals(Ljava/lang/Object;)Z
java.util.Hashtable.get(Ljava/lang/Object;)Ljava/lang/Object; -> java.util.AbstractSet.equals(Ljava/lang/Object;)Z
java.util.Hashtable.get(Ljava/lang/Object;)Ljava/lang/Object; -> java.util.Hashtable$Entry.equals(Ljava/lang/Object;)Z
java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; -> java.util.AbstractSet.equals(Ljava/lang/Object;)Z
java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; -> java.util.AbstractSet.hashCode()I
java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; -> java.util.Hashtable$Entry.equals(Ljava/lang/Object;)Z
java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; -> java.util.Hashtable$Entry.hashCode()I
java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; -> java.util.Hashtable.addEntry(ILjava/lang/Object;Ljava/lang/Object;I)V
java.util.Hashtable.remove(Ljava/lang/Object;)Ljava/lang/Object; -> java.util.AbstractSet.equals(Ljava/lang/Object;)Z
java.util.Hashtable.remove(Ljava/lang/Object;)Ljava/lang/Object; -> java.util.Hashtable$Entry.equals(Ljava/lang/Object;)Z
java.util.JapaneseImperialCalendar.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.JapaneseImperialCalendar.<init>(Ljava/util/TimeZone;Ljava/util/Locale;)V -> java.util.Calendar.setTimeInMillis(J)V
java.util.JumboEnumSet.add(Ljava/lang/Enum;)Z -> java.util.EnumSet.typeCheck(Ljava/lang/Enum;)V
java.util.JumboEnumSet.add(Ljava/lang/Object;)Z -> java.util.JumboEnumSet.add(Ljava/lang/Enum;)Z
java.util.LinkedHashMap.afterNodeInsertion(Z)V -> java.util.HashMap.hash(Ljava/lang/Object;)I
java.util.LinkedHashMap.afterNodeInsertion(Z)V -> java.util.HashMap.removeNode(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/util/HashMap$Node;
java.util.LinkedHashMap.get(Ljava/lang/Object;)Ljava/lang/Object; -> java.util.HashMap.getNode(ILjava/lang/Object;)Ljava/util/HashMap$Node;
java.util.LinkedHashMap.get(Ljava/lang/Object;)Ljava/lang/Object; -> java.util.HashMap.hash(Ljava/lang/Object;)I
java.util.Locale.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.Locale.<clinit>()V -> java.util.Locale.initDefault()Ljava/util/Locale;
java.util.Locale.getDefault(Ljava/util/Locale$Category;)Ljava/util/Locale; -> java.lang.AssertionError.<init>(Ljava/lang/Object;)V
java.util.Locale.getDefault(Ljava/util/Locale$Category;)Ljava/util/Locale; -> java.util.Locale.initDefault(Ljava/util/Locale$Category;)Ljava/util/Locale;
java.util.Locale.initDefault()Ljava/util/Locale; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.util.Locale.initDefault(Ljava/util/Locale$Category;)Ljava/util/Locale; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.util.Objects.hashCode(Ljava/lang/Object;)I -> java.util.AbstractSet.hashCode()I
java.util.Properties$LineReader.readLine()I -> java.io.FilterInputStream.read([B)I
java.util.Properties.getProperty(Ljava/lang/String;)Ljava/lang/String; -> java.util.Hashtable.get(Ljava/lang/Object;)Ljava/lang/Object;
java.util.Properties.load(Ljava/io/InputStream;)V -> java.util.Properties.load0(Ljava/util/Properties$LineReader;)V
java.util.Properties.load0(Ljava/util/Properties$LineReader;)V -> java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.util.Properties.load0(Ljava/util/Properties$LineReader;)V -> java.util.Properties$LineReader.readLine()I
java.util.Random.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.RegularEnumSet.add(Ljava/lang/Enum;)Z -> java.util.EnumSet.typeCheck(Ljava/lang/Enum;)V
java.util.RegularEnumSet.add(Ljava/lang/Object;)Z -> java.util.RegularEnumSet.add(Ljava/lang/Enum;)Z
java.util.ServiceLoader$1.hasNext()Z -> java.util.ServiceLoader$LazyIterator.hasNext()Z
java.util.ServiceLoader$1.next()Ljava/lang/Object; -> java.util.ServiceLoader$LazyIterator.next()Ljava/lang/Object;
java.util.ServiceLoader$LazyIterator$1.run()Ljava/lang/Boolean; -> java.util.ServiceLoader$LazyIterator.access$600(Ljava/util/ServiceLoader$LazyIterator;)Z
java.util.ServiceLoader$LazyIterator$1.run()Ljava/lang/Object; -> java.util.ServiceLoader$LazyIterator$1.run()Ljava/lang/Boolean;
java.util.ServiceLoader$LazyIterator$2.run()Ljava/lang/Object; -> java.util.ServiceLoader$LazyIterator.access$700(Ljava/util/ServiceLoader$LazyIterator;)Ljava/lang/Object;
java.util.ServiceLoader$LazyIterator.access$600(Ljava/util/ServiceLoader$LazyIterator;)Z -> java.util.ServiceLoader$LazyIterator.hasNextService()Z
java.util.ServiceLoader$LazyIterator.access$700(Ljava/util/ServiceLoader$LazyIterator;)Ljava/lang/Object; -> java.util.ServiceLoader$LazyIterator.nextService()Ljava/lang/Object;
java.util.ServiceLoader$LazyIterator.hasNext()Z -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;
java.util.ServiceLoader$LazyIterator.hasNext()Z -> java.util.ServiceLoader$LazyIterator.hasNextService()Z
java.util.ServiceLoader$LazyIterator.hasNextService()Z -> java.lang.ClassLoader.getSystemResources(Ljava/lang/String;)Ljava/util/Enumeration;
java.util.ServiceLoader$LazyIterator.hasNextService()Z -> java.util.ServiceLoader.access$200(Ljava/util/ServiceLoader;Ljava/lang/Class;Ljava/net/URL;)Ljava/util/Iterator;
java.util.ServiceLoader$LazyIterator.next()Ljava/lang/Object; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;
java.util.ServiceLoader$LazyIterator.next()Ljava/lang/Object; -> java.util.ServiceLoader$LazyIterator.nextService()Ljava/lang/Object;
java.util.ServiceLoader$LazyIterator.nextService()Ljava/lang/Object; -> java.lang.Class.forName(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;
java.util.ServiceLoader$LazyIterator.nextService()Ljava/lang/Object; -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.util.ServiceLoader$LazyIterator.nextService()Ljava/lang/Object; -> java.util.ServiceLoader$LazyIterator.hasNextService()Z
java.util.ServiceLoader.<init>(Ljava/lang/Class;Ljava/lang/ClassLoader;)V -> java.lang.ClassLoader.getSystemClassLoader()Ljava/lang/ClassLoader;
java.util.ServiceLoader.access$200(Ljava/util/ServiceLoader;Ljava/lang/Class;Ljava/net/URL;)Ljava/util/Iterator; -> java.util.ServiceLoader.parse(Ljava/lang/Class;Ljava/net/URL;)Ljava/util/Iterator;
java.util.ServiceLoader.fail(Ljava/lang/Class;Ljava/net/URL;ILjava/lang/String;)V -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.util.ServiceLoader.load(Ljava/lang/Class;)Ljava/util/ServiceLoader; -> java.lang.Thread.getContextClassLoader()Ljava/lang/ClassLoader;
java.util.ServiceLoader.load(Ljava/lang/Class;)Ljava/util/ServiceLoader; -> java.util.ServiceLoader.load(Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/ServiceLoader;
java.util.ServiceLoader.load(Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/ServiceLoader; -> java.util.ServiceLoader.<init>(Ljava/lang/Class;Ljava/lang/ClassLoader;)V
java.util.ServiceLoader.parse(Ljava/lang/Class;Ljava/net/URL;)Ljava/util/Iterator; -> java.util.ServiceLoader.parseLine(Ljava/lang/Class;Ljava/net/URL;Ljava/io/BufferedReader;ILjava/util/List;)I
java.util.ServiceLoader.parseLine(Ljava/lang/Class;Ljava/net/URL;Ljava/io/BufferedReader;ILjava/util/List;)I -> java.util.HashMap.containsKey(Ljava/lang/Object;)Z
java.util.ServiceLoader.parseLine(Ljava/lang/Class;Ljava/net/URL;Ljava/io/BufferedReader;ILjava/util/List;)I -> java.util.ServiceLoader.fail(Ljava/lang/Class;Ljava/net/URL;ILjava/lang/String;)V
java.util.TimeZone$1.run()Ljava/lang/Object; -> java.util.TimeZone$1.run()Ljava/lang/Void;
java.util.TimeZone$1.run()Ljava/lang/Void; -> java.lang.System.setProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
java.util.TimeZone.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.TimeZone.getDefault()Ljava/util/TimeZone; -> java.util.TimeZone.getDefaultRef()Ljava/util/TimeZone;
java.util.TimeZone.getDefaultRef()Ljava/util/TimeZone; -> java.util.TimeZone.setDefaultZone()Ljava/util/TimeZone;
java.util.TimeZone.setDefaultZone()Ljava/util/TimeZone; -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.util.concurrent.AbstractExecutorService.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.concurrent.ConcurrentHashMap$TreeBin.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.concurrent.ConcurrentHashMap$TreeBin.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.concurrent.ConcurrentHashMap.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.concurrent.SynchronousQueue$TransferQueue$QNode.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.concurrent.SynchronousQueue$TransferQueue.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.concurrent.SynchronousQueue$TransferStack$SNode.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.concurrent.SynchronousQueue$TransferStack.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.concurrent.ThreadLocalRandom.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.concurrent.ThreadLocalRandom.<clinit>()V -> java.util.concurrent.ThreadLocalRandom.initialSeed()J
java.util.concurrent.ThreadLocalRandom.initialSeed()J -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
java.util.concurrent.ThreadPoolExecutor$Worker.lock()V -> java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(I)V
java.util.concurrent.ThreadPoolExecutor$Worker.run()V -> java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V
java.util.concurrent.ThreadPoolExecutor.addWorker(Ljava/lang/Runnable;Z)Z -> java.lang.Thread.start()V
java.util.concurrent.ThreadPoolExecutor.addWorker(Ljava/lang/Runnable;Z)Z -> java.util.HashSet.add(Ljava/lang/Object;)Z
java.util.concurrent.ThreadPoolExecutor.addWorker(Ljava/lang/Runnable;Z)Z -> java.util.concurrent.ThreadPoolExecutor$Worker.<init>(Ljava/util/concurrent/ThreadPoolExecutor;Ljava/lang/Runnable;)V
java.util.concurrent.ThreadPoolExecutor.addWorker(Ljava/lang/Runnable;Z)Z -> java.util.concurrent.ThreadPoolExecutor.addWorkerFailed(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V
java.util.concurrent.ThreadPoolExecutor.addWorker(Ljava/lang/Runnable;Z)Z -> java.util.concurrent.locks.ReentrantLock.lock()V
java.util.concurrent.ThreadPoolExecutor.addWorkerFailed(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V -> java.util.HashSet.remove(Ljava/lang/Object;)Z
java.util.concurrent.ThreadPoolExecutor.addWorkerFailed(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V -> java.util.concurrent.ThreadPoolExecutor.tryTerminate()V
java.util.concurrent.ThreadPoolExecutor.addWorkerFailed(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V -> java.util.concurrent.locks.ReentrantLock.lock()V
java.util.concurrent.ThreadPoolExecutor.checkShutdownAccess()V -> java.lang.SecurityManager.checkAccess(Ljava/lang/Thread;)V
java.util.concurrent.ThreadPoolExecutor.checkShutdownAccess()V -> java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)V
java.util.concurrent.ThreadPoolExecutor.checkShutdownAccess()V -> java.util.concurrent.locks.ReentrantLock.lock()V
java.util.concurrent.ThreadPoolExecutor.finalize()V -> java.util.concurrent.ThreadPoolExecutor.shutdown()V
java.util.concurrent.ThreadPoolExecutor.interruptIdleWorkers()V -> java.util.concurrent.ThreadPoolExecutor.interruptIdleWorkers(Z)V
java.util.concurrent.ThreadPoolExecutor.interruptIdleWorkers(Z)V -> java.lang.Thread.interrupt()V
java.util.concurrent.ThreadPoolExecutor.interruptIdleWorkers(Z)V -> java.util.concurrent.locks.ReentrantLock.lock()V
java.util.concurrent.ThreadPoolExecutor.processWorkerExit(Ljava/util/concurrent/ThreadPoolExecutor$Worker;Z)V -> java.util.HashSet.remove(Ljava/lang/Object;)Z
java.util.concurrent.ThreadPoolExecutor.processWorkerExit(Ljava/util/concurrent/ThreadPoolExecutor$Worker;Z)V -> java.util.concurrent.ThreadPoolExecutor.addWorker(Ljava/lang/Runnable;Z)Z
java.util.concurrent.ThreadPoolExecutor.processWorkerExit(Ljava/util/concurrent/ThreadPoolExecutor$Worker;Z)V -> java.util.concurrent.ThreadPoolExecutor.tryTerminate()V
java.util.concurrent.ThreadPoolExecutor.processWorkerExit(Ljava/util/concurrent/ThreadPoolExecutor$Worker;Z)V -> java.util.concurrent.locks.ReentrantLock.lock()V
java.util.concurrent.ThreadPoolExecutor.remove(Ljava/lang/Runnable;)Z -> java.util.concurrent.ThreadPoolExecutor.tryTerminate()V
java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V -> java.lang.Thread.interrupt()V
java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V -> java.util.concurrent.ThreadPoolExecutor$Worker.lock()V
java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V -> java.util.concurrent.ThreadPoolExecutor.processWorkerExit(Ljava/util/concurrent/ThreadPoolExecutor$Worker;Z)V
java.util.concurrent.ThreadPoolExecutor.shutdown()V -> java.util.concurrent.ThreadPoolExecutor.checkShutdownAccess()V
java.util.concurrent.ThreadPoolExecutor.shutdown()V -> java.util.concurrent.ThreadPoolExecutor.interruptIdleWorkers()V
java.util.concurrent.ThreadPoolExecutor.shutdown()V -> java.util.concurrent.ThreadPoolExecutor.tryTerminate()V
java.util.concurrent.ThreadPoolExecutor.shutdown()V -> java.util.concurrent.locks.ReentrantLock.lock()V
java.util.concurrent.ThreadPoolExecutor.toString()Ljava/lang/String; -> java.lang.Object.toString()Ljava/lang/String;
java.util.concurrent.ThreadPoolExecutor.toString()Ljava/lang/String; -> java.util.concurrent.locks.ReentrantLock.lock()V
java.util.concurrent.ThreadPoolExecutor.tryTerminate()V -> java.util.concurrent.ThreadPoolExecutor.interruptIdleWorkers(Z)V
java.util.concurrent.ThreadPoolExecutor.tryTerminate()V -> java.util.concurrent.locks.ReentrantLock.lock()V
java.util.concurrent.atomic.AtomicInteger.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.concurrent.atomic.AtomicLong.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.concurrent.atomic.AtomicReference.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1.run()Ljava/lang/Object; -> java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1.run()Ljava/lang/reflect/Field;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1.run()Ljava/lang/reflect/Field; -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.<init>(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)V -> java.lang.Class.getClassLoader()Ljava/lang/ClassLoader;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.<init>(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)V -> java.security.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.<init>(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)V -> java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.isAncestor(Ljava/lang/ClassLoader;Ljava/lang/ClassLoader;)Z
java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.isAncestor(Ljava/lang/ClassLoader;Ljava/lang/ClassLoader;)Z -> java.lang.ClassLoader.getParent()Ljava/lang/ClassLoader;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater; -> java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.<init>(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)V
java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(I)V -> java.util.concurrent.locks.AbstractQueuedSynchronizer.selfInterrupt()V
java.util.concurrent.locks.AbstractQueuedSynchronizer.selfInterrupt()V -> java.lang.Thread.interrupt()V
java.util.concurrent.locks.LockSupport.<clinit>()V -> java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field;
java.util.concurrent.locks.ReentrantLock$NonfairSync.lock()V -> java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(I)V
java.util.concurrent.locks.ReentrantLock.lock()V -> java.util.concurrent.locks.ReentrantLock$NonfairSync.lock()V
java.util.jar.Attributes.get(Ljava/lang/Object;)Ljava/lang/Object; -> java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object;
java.util.jar.Attributes.getValue(Ljava/lang/String;)Ljava/lang/String; -> java.util.jar.Attributes.get(Ljava/lang/Object;)Ljava/lang/Object;
java.util.jar.Attributes.getValue(Ljava/util/jar/Attributes$Name;)Ljava/lang/String; -> java.util.jar.Attributes.get(Ljava/lang/Object;)Ljava/lang/Object;
java.util.jar.Attributes.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.util.jar.Attributes.putValue(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.util.jar.Attributes.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.util.jar.Attributes.read(Ljava/util/jar/Manifest$FastInputStream;[B)V -> java.lang.String.<init>([BIILjava/lang/String;)V
java.util.jar.Attributes.read(Ljava/util/jar/Manifest$FastInputStream;[B)V -> java.util.jar.Attributes.putValue(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
java.util.jar.Attributes.read(Ljava/util/jar/Manifest$FastInputStream;[B)V -> java.util.jar.Manifest$FastInputStream.peek()B
java.util.jar.Attributes.read(Ljava/util/jar/Manifest$FastInputStream;[B)V -> java.util.jar.Manifest$FastInputStream.readLine([B)I
java.util.jar.JarInputStream.<init>(Ljava/io/InputStream;Z)V -> java.util.jar.JarInputStream.checkManifest(Ljava/util/jar/JarEntry;)Ljava/util/jar/JarEntry;
java.util.jar.JarInputStream.<init>(Ljava/io/InputStream;Z)V -> java.util.zip.ZipInputStream.getNextEntry()Ljava/util/zip/ZipEntry;
java.util.jar.JarInputStream.checkManifest(Ljava/util/jar/JarEntry;)Ljava/util/jar/JarEntry; -> java.util.jar.JarInputStream.getBytes(Ljava/io/InputStream;)[B
java.util.jar.JarInputStream.checkManifest(Ljava/util/jar/JarEntry;)Ljava/util/jar/JarEntry; -> java.util.jar.Manifest.read(Ljava/io/InputStream;)V
java.util.jar.JarInputStream.checkManifest(Ljava/util/jar/JarEntry;)Ljava/util/jar/JarEntry; -> java.util.zip.ZipInputStream.closeEntry()V
java.util.jar.JarInputStream.checkManifest(Ljava/util/jar/JarEntry;)Ljava/util/jar/JarEntry; -> java.util.zip.ZipInputStream.getNextEntry()Ljava/util/zip/ZipEntry;
java.util.jar.JarInputStream.createZipEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry; -> java.util.jar.Manifest.getAttributes(Ljava/lang/String;)Ljava/util/jar/Attributes;
java.util.jar.JarInputStream.getBytes(Ljava/io/InputStream;)[B -> java.io.BufferedInputStream.read([BII)I
java.util.jar.JarInputStream.read([BII)I -> java.util.jar.JarVerifier.update(I[BIILsun/security/util/ManifestEntryVerifier;)V
java.util.jar.JarInputStream.read([BII)I -> java.util.zip.ZipInputStream.read([BII)I
java.util.jar.JarVerifier.processEntry(Lsun/security/util/ManifestEntryVerifier;)V -> java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
java.util.jar.JarVerifier.processEntry(Lsun/security/util/ManifestEntryVerifier;)V -> java.util.Hashtable.get(Ljava/lang/Object;)Ljava/lang/Object;
java.util.jar.JarVerifier.processEntry(Lsun/security/util/ManifestEntryVerifier;)V -> java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.util.jar.JarVerifier.update(I[BIILsun/security/util/ManifestEntryVerifier;)V -> java.util.jar.JarVerifier.processEntry(Lsun/security/util/ManifestEntryVerifier;)V
java.util.jar.Manifest$FastInputStream.fill()V -> java.io.PushbackInputStream.read([BII)I
java.util.jar.Manifest$FastInputStream.fill()V -> java.util.jar.JarInputStream.read([BII)I
java.util.jar.Manifest$FastInputStream.peek()B -> java.util.jar.Manifest$FastInputStream.fill()V
java.util.jar.Manifest$FastInputStream.readLine([B)I -> java.util.jar.Manifest$FastInputStream.readLine([BII)I
java.util.jar.Manifest$FastInputStream.readLine([BII)I -> java.util.jar.Manifest$FastInputStream.fill()V
java.util.jar.Manifest.<init>(Ljava/io/InputStream;)V -> java.util.jar.Manifest.read(Ljava/io/InputStream;)V
java.util.jar.Manifest.getAttributes(Ljava/lang/String;)Ljava/util/jar/Attributes; -> java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object;
java.util.jar.Manifest.parseName([BI)Ljava/lang/String; -> java.lang.String.<init>([BIILjava/lang/String;)V
java.util.jar.Manifest.read(Ljava/io/InputStream;)V -> java.lang.String.<init>([BIILjava/lang/String;)V
java.util.jar.Manifest.read(Ljava/io/InputStream;)V -> java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java.util.jar.Manifest.read(Ljava/io/InputStream;)V -> java.util.jar.Attributes.read(Ljava/util/jar/Manifest$FastInputStream;[B)V
java.util.jar.Manifest.read(Ljava/io/InputStream;)V -> java.util.jar.Manifest$FastInputStream.peek()B
java.util.jar.Manifest.read(Ljava/io/InputStream;)V -> java.util.jar.Manifest$FastInputStream.readLine([B)I
java.util.jar.Manifest.read(Ljava/io/InputStream;)V -> java.util.jar.Manifest.getAttributes(Ljava/lang/String;)Ljava/util/jar/Attributes;
java.util.jar.Manifest.read(Ljava/io/InputStream;)V -> java.util.jar.Manifest.parseName([BI)Ljava/lang/String;
java.util.zip.CRC32.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.zip.Inflater.<clinit>()V -> java.lang.Class.desiredAssertionStatus()Z
java.util.zip.InflaterInputStream.fill()V -> java.io.PushbackInputStream.read([BII)I
java.util.zip.InflaterInputStream.fill()V -> java.util.jar.JarInputStream.read([BII)I
java.util.zip.InflaterInputStream.read()I -> java.util.jar.JarInputStream.read([BII)I
java.util.zip.InflaterInputStream.read([BII)I -> java.util.zip.InflaterInputStream.fill()V
java.util.zip.InflaterInputStream.read([BII)I -> java.util.zip.ZipFile$ZipFileInflaterInputStream.fill()V
java.util.zip.ZipFile$ZipEntryIterator.next()Ljava/util/zip/ZipEntry; -> java.util.zip.ZipFile.access$900(Ljava/util/zip/ZipFile;Ljava/lang/String;J)Ljava/util/zip/ZipEntry;
java.util.zip.ZipFile$ZipEntryIterator.nextElement()Ljava/lang/Object; -> java.util.zip.ZipFile$ZipEntryIterator.nextElement()Ljava/util/zip/ZipEntry;
java.util.zip.ZipFile$ZipEntryIterator.nextElement()Ljava/util/zip/ZipEntry; -> java.util.zip.ZipFile$ZipEntryIterator.next()Ljava/util/zip/ZipEntry;
java.util.zip.ZipFile$ZipFileInflaterInputStream.fill()V -> java.io.PushbackInputStream.read([BII)I
java.util.zip.ZipFile$ZipFileInflaterInputStream.fill()V -> java.util.jar.JarInputStream.read([BII)I
java.util.zip.ZipFile.<init>(Ljava/io/File;)V -> java.util.zip.ZipFile.<init>(Ljava/io/File;I)V
java.util.zip.ZipFile.<init>(Ljava/io/File;I)V -> java.util.zip.ZipFile.<init>(Ljava/io/File;ILjava/nio/charset/Charset;)V
java.util.zip.ZipFile.<init>(Ljava/io/File;ILjava/nio/charset/Charset;)V -> java.io.File.lastModified()J
java.util.zip.ZipFile.<init>(Ljava/io/File;ILjava/nio/charset/Charset;)V -> java.lang.SecurityManager.checkDelete(Ljava/lang/String;)V
java.util.zip.ZipFile.<init>(Ljava/io/File;ILjava/nio/charset/Charset;)V -> java.lang.SecurityManager.checkRead(Ljava/lang/String;)V
java.util.zip.ZipFile.<init>(Ljava/lang/String;)V -> java.util.zip.ZipFile.<init>(Ljava/io/File;I)V
java.util.zip.ZipFile.access$900(Ljava/util/zip/ZipFile;Ljava/lang/String;J)Ljava/util/zip/ZipEntry; -> java.util.zip.ZipFile.getZipEntry(Ljava/lang/String;J)Ljava/util/zip/ZipEntry;
java.util.zip.ZipFile.close()V -> java.util.HashMap.<init>(Ljava/util/Map;)V
java.util.zip.ZipFile.finalize()V -> java.util.zip.ZipFile.close()V
java.util.zip.ZipFile.getEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry; -> java.util.zip.ZipFile.getZipEntry(Ljava/lang/String;J)Ljava/util/zip/ZipEntry;
java.util.zip.ZipFile.getZipEntry(Ljava/lang/String;J)Ljava/util/zip/ZipEntry; -> java.util.zip.ZipUtils.dosToJavaTime(J)J
java.util.zip.ZipInputStream.closeEntry()V -> java.util.jar.JarInputStream.read([BII)I
java.util.zip.ZipInputStream.getNextEntry()Ljava/util/zip/ZipEntry; -> java.util.zip.ZipInputStream.closeEntry()V
java.util.zip.ZipInputStream.getNextEntry()Ljava/util/zip/ZipEntry; -> java.util.zip.ZipInputStream.readLOC()Ljava/util/zip/ZipEntry;
java.util.zip.ZipInputStream.read([BII)I -> java.io.PushbackInputStream.read([BII)I
java.util.zip.ZipInputStream.read([BII)I -> java.util.jar.JarInputStream.read([BII)I
java.util.zip.ZipInputStream.read([BII)I -> java.util.zip.InflaterInputStream.read([BII)I
java.util.zip.ZipInputStream.read([BII)I -> java.util.zip.ZipInputStream.readEnd(Ljava/util/zip/ZipEntry;)V
java.util.zip.ZipInputStream.readEnd(Ljava/util/zip/ZipEntry;)V -> java.util.zip.ZipInputStream.readFully([BII)V
java.util.zip.ZipInputStream.readFully([BII)V -> java.io.PushbackInputStream.read([BII)I
java.util.zip.ZipInputStream.readFully([BII)V -> java.util.jar.JarInputStream.read([BII)I
java.util.zip.ZipInputStream.readLOC()Ljava/util/zip/ZipEntry; -> java.util.jar.JarInputStream.createZipEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry;
java.util.zip.ZipInputStream.readLOC()Ljava/util/zip/ZipEntry; -> java.util.zip.ZipInputStream.readFully([BII)V
java.util.zip.ZipInputStream.readLOC()Ljava/util/zip/ZipEntry; -> java.util.zip.ZipUtils.dosToJavaTime(J)J
java.util.zip.ZipUtils.dosToJavaTime(J)J -> java.util.Date.<init>(IIIIII)V
java.util.zip.ZipUtils.dosToJavaTime(J)J -> java.util.Date.getTime()J
org.eclipse.equinox.launcher.JNIBridge.getOSRecommendedFolder()Ljava/lang/String; -> org.eclipse.equinox.launcher.JNIBridge._get_os_recommended_folder()Ljava/lang/String;
org.eclipse.equinox.launcher.JNIBridge.getOSRecommendedFolder()Ljava/lang/String; -> org.eclipse.equinox.launcher.JNIBridge.getOSRecommendedFolder()Ljava/lang/String;
org.eclipse.equinox.launcher.JNIBridge.getOSRecommendedFolder()Ljava/lang/String; -> org.eclipse.equinox.launcher.JNIBridge.loadLibrary()V
org.eclipse.equinox.launcher.JNIBridge.getSplashHandle()J -> org.eclipse.equinox.launcher.JNIBridge._get_splash_handle()J
org.eclipse.equinox.launcher.JNIBridge.getSplashHandle()J -> org.eclipse.equinox.launcher.JNIBridge.getSplashHandle()J
org.eclipse.equinox.launcher.JNIBridge.getSplashHandle()J -> org.eclipse.equinox.launcher.JNIBridge.loadLibrary()V
org.eclipse.equinox.launcher.JNIBridge.loadLibrary()V -> java.lang.Runtime.load(Ljava/lang/String;)V
org.eclipse.equinox.launcher.JNIBridge.loadLibrary()V -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.JNIBridge.loadLibrary()V -> org.eclipse.equinox.launcher.JNIBridge.OleInitialize(I)I
org.eclipse.equinox.launcher.JNIBridge.setExitData(Ljava/lang/String;Ljava/lang/String;)Z -> org.eclipse.equinox.launcher.JNIBridge._set_exit_data(Ljava/lang/String;Ljava/lang/String;)V
org.eclipse.equinox.launcher.JNIBridge.setExitData(Ljava/lang/String;Ljava/lang/String;)Z -> org.eclipse.equinox.launcher.JNIBridge.loadLibrary()V
org.eclipse.equinox.launcher.JNIBridge.setExitData(Ljava/lang/String;Ljava/lang/String;)Z -> org.eclipse.equinox.launcher.JNIBridge.setExitData(Ljava/lang/String;Ljava/lang/String;)Z
org.eclipse.equinox.launcher.JNIBridge.setLauncherInfo(Ljava/lang/String;Ljava/lang/String;)Z -> org.eclipse.equinox.launcher.JNIBridge._set_launcher_info(Ljava/lang/String;Ljava/lang/String;)V
org.eclipse.equinox.launcher.JNIBridge.setLauncherInfo(Ljava/lang/String;Ljava/lang/String;)Z -> org.eclipse.equinox.launcher.JNIBridge.loadLibrary()V
org.eclipse.equinox.launcher.JNIBridge.setLauncherInfo(Ljava/lang/String;Ljava/lang/String;)Z -> org.eclipse.equinox.launcher.JNIBridge.setLauncherInfo(Ljava/lang/String;Ljava/lang/String;)Z
org.eclipse.equinox.launcher.JNIBridge.showSplash(Ljava/lang/String;)Z -> org.eclipse.equinox.launcher.JNIBridge._show_splash(Ljava/lang/String;)V
org.eclipse.equinox.launcher.JNIBridge.showSplash(Ljava/lang/String;)Z -> org.eclipse.equinox.launcher.JNIBridge.loadLibrary()V
org.eclipse.equinox.launcher.JNIBridge.showSplash(Ljava/lang/String;)Z -> org.eclipse.equinox.launcher.JNIBridge.showSplash(Ljava/lang/String;)Z
org.eclipse.equinox.launcher.JNIBridge.takeDownSplash()Z -> org.eclipse.equinox.launcher.JNIBridge._takedown_splash()V
org.eclipse.equinox.launcher.JNIBridge.takeDownSplash()Z -> org.eclipse.equinox.launcher.JNIBridge.loadLibrary()V
org.eclipse.equinox.launcher.JNIBridge.takeDownSplash()Z -> org.eclipse.equinox.launcher.JNIBridge.takeDownSplash()Z
org.eclipse.equinox.launcher.JNIBridge.uninitialize()Z -> org.eclipse.equinox.launcher.JNIBridge.OleUninitialize()V
org.eclipse.equinox.launcher.JNIBridge.updateSplash()Z -> org.eclipse.equinox.launcher.JNIBridge._update_splash()V
org.eclipse.equinox.launcher.JNIBridge.updateSplash()Z -> org.eclipse.equinox.launcher.JNIBridge.loadLibrary()V
org.eclipse.equinox.launcher.JNIBridge.updateSplash()Z -> org.eclipse.equinox.launcher.JNIBridge.updateSplash()Z
org.eclipse.equinox.launcher.Main$1.elements()Ljava/util/Enumeration; -> org.eclipse.equinox.launcher.Main$2.<init>(Lorg/eclipse/equinox/launcher/Main$1;)V
org.eclipse.equinox.launcher.Main$2.nextElement()Ljava/lang/Object; -> org.eclipse.equinox.launcher.Main$1.access$0(Lorg/eclipse/equinox/launcher/Main$1;)Lorg/eclipse/equinox/launcher/Main$EclipsePolicy;
org.eclipse.equinox.launcher.Main$EclipsePolicy.<init>(Lorg/eclipse/equinox/launcher/Main;Ljava/security/Policy;[Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main$1.<init>(Lorg/eclipse/equinox/launcher/Main$EclipsePolicy;)V
org.eclipse.equinox.launcher.Main$EclipsePolicy.getPermissions(Ljava/security/ProtectionDomain;)Ljava/security/PermissionCollection; -> org.eclipse.equinox.launcher.Main$EclipsePolicy.contains(Ljava/security/CodeSource;)Z
org.eclipse.equinox.launcher.Main$EclipsePolicy.getPermissions(Ljava/security/ProtectionDomain;)Ljava/security/PermissionCollection; -> org.eclipse.equinox.launcher.Main$EclipsePolicy.getPermissions(Ljava/security/ProtectionDomain;)Ljava/security/PermissionCollection;
org.eclipse.equinox.launcher.Main$SplashHandler.run()V -> org.eclipse.equinox.launcher.Main.takeDownSplash()V
org.eclipse.equinox.launcher.Main$StartupClassLoader.<init>(Lorg/eclipse/equinox/launcher/Main;[Ljava/net/URL;Ljava/lang/ClassLoader;)V -> java.net.URLClassLoader.<init>([Ljava/net/URL;Ljava/lang/ClassLoader;)V
org.eclipse.equinox.launcher.Main.<init>()V -> org.eclipse.equinox.launcher.Main$SplashHandler.<init>(Lorg/eclipse/equinox/launcher/Main;)V
org.eclipse.equinox.launcher.Main.OS_WS_ARCHToString()Ljava/lang/String; -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.OS_WS_ARCHToString()Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getArch()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.OS_WS_ARCHToString()Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getOS()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.OS_WS_ARCHToString()Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getWS()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.addBaseJars(Ljava/net/URL;Ljava/util/ArrayList;)V -> java.io.File.isDirectory()Z
org.eclipse.equinox.launcher.Main.addBaseJars(Ljava/net/URL;Ljava/util/ArrayList;)V -> java.io.File.toURL()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.addBaseJars(Ljava/net/URL;Ljava/util/ArrayList;)V -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.addBaseJars(Ljava/net/URL;Ljava/util/ArrayList;)V -> java.net.URL.<init>(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.addBaseJars(Ljava/net/URL;Ljava/util/ArrayList;)V -> java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.addBaseJars(Ljava/net/URL;Ljava/util/ArrayList;)V -> org.eclipse.equinox.launcher.Main.addEntry(Ljava/net/URL;Ljava/util/List;)V
org.eclipse.equinox.launcher.Main.addBaseJars(Ljava/net/URL;Ljava/util/ArrayList;)V -> org.eclipse.equinox.launcher.Main.getArrayFromList(Ljava/lang/String;)[Ljava/lang/String;
org.eclipse.equinox.launcher.Main.addBaseJars(Ljava/net/URL;Ljava/util/ArrayList;)V -> org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V
org.eclipse.equinox.launcher.Main.addDevEntries(Ljava/net/URL;Ljava/util/List;Ljava/lang/String;)V -> java.io.File.toURL()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.addDevEntries(Ljava/net/URL;Ljava/util/List;Ljava/lang/String;)V -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.addDevEntries(Ljava/net/URL;Ljava/util/List;Ljava/lang/String;)V -> java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.addDevEntries(Ljava/net/URL;Ljava/util/List;Ljava/lang/String;)V -> java.util.Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.addDevEntries(Ljava/net/URL;Ljava/util/List;Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.addEntry(Ljava/net/URL;Ljava/util/List;)V
org.eclipse.equinox.launcher.Main.addDevEntries(Ljava/net/URL;Ljava/util/List;Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.getArrayFromList(Ljava/lang/String;)[Ljava/lang/String;
org.eclipse.equinox.launcher.Main.addEntry(Ljava/net/URL;Ljava/util/List;)V -> java.io.File.exists()Z
org.eclipse.equinox.launcher.Main.adjustTrailingSlash(Ljava/net/URL;Z)Ljava/net/URL; -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.adjustTrailingSlash(Ljava/net/URL;Z)Ljava/net/URL; -> java.net.URL.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> java.io.PrintStream.println(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> java.lang.System.setProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.beforeFwkInvocation()V
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.checkConfigurationLocation(Ljava/net/URL;)Z
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.checkVersion(Ljava/lang/String;Ljava/lang/String;)Z
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.getBootPath(Ljava/lang/String;)[Ljava/net/URL;
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.handleSplash([Ljava/net/URL;)V
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.invokeFramework([Ljava/lang/String;[Ljava/net/URL;)V
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.processCommandLine([Ljava/lang/String;)[Ljava/lang/String;
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.processConfiguration()V
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.setSecurityPolicy([Ljava/net/URL;)V
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.setupJNI([Ljava/net/URL;)V
org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.setupVMProperties()V
org.eclipse.equinox.launcher.Main.buildLocation(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;)Ljava/net/URL; -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.buildLocation(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;)Ljava/net/URL; -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.buildLocation(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;)Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.buildURL(Ljava/lang/String;Z)Ljava/net/URL;
org.eclipse.equinox.launcher.Main.buildLocation(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;)Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.getInstallDirHash()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.buildLocation(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;)Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.substituteVar(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.buildURL(Ljava/lang/String;Z)Ljava/net/URL; -> java.io.File.isDirectory()Z
org.eclipse.equinox.launcher.Main.buildURL(Ljava/lang/String;Z)Ljava/net/URL; -> java.io.File.toURL()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.buildURL(Ljava/lang/String;Z)Ljava/net/URL; -> java.net.URL.<init>(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.buildURL(Ljava/lang/String;Z)Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.adjustTrailingSlash(Ljava/net/URL;Z)Ljava/net/URL;
org.eclipse.equinox.launcher.Main.buildURL(Ljava/lang/String;Z)Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.resolveFile(Ljava/io/File;)Ljava/io/File;
org.eclipse.equinox.launcher.Main.canWrite(Ljava/io/File;)Z -> java.io.File.canWrite()Z
org.eclipse.equinox.launcher.Main.canWrite(Ljava/io/File;)Z -> java.io.File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
org.eclipse.equinox.launcher.Main.canWrite(Ljava/io/File;)Z -> java.io.File.delete()Z
org.eclipse.equinox.launcher.Main.canWrite(Ljava/io/File;)Z -> java.io.File.isDirectory()Z
org.eclipse.equinox.launcher.Main.checkConfigurationLocation(Ljava/net/URL;)Z -> java.io.File.exists()Z
org.eclipse.equinox.launcher.Main.checkConfigurationLocation(Ljava/net/URL;)Z -> java.io.File.mkdirs()Z
org.eclipse.equinox.launcher.Main.checkConfigurationLocation(Ljava/net/URL;)Z -> java.lang.StringBuffer.append(Ljava/lang/Object;)Ljava/lang/StringBuffer;
org.eclipse.equinox.launcher.Main.checkConfigurationLocation(Ljava/net/URL;)Z -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.checkConfigurationLocation(Ljava/net/URL;)Z -> org.eclipse.equinox.launcher.Main.canWrite(Ljava/io/File;)Z
org.eclipse.equinox.launcher.Main.checkVersion(Ljava/lang/String;Ljava/lang/String;)Z -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.checkVersion(Ljava/lang/String;Ljava/lang/String;)Z -> org.eclipse.equinox.launcher.Main$Identifier.<init>(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.checkVersion(Ljava/lang/String;Ljava/lang/String;)Z -> org.eclipse.equinox.launcher.Main$Identifier.isGreaterEqualTo(Lorg/eclipse/equinox/launcher/Main$Identifier;)Z
org.eclipse.equinox.launcher.Main.computeConfigurationLocationForMacOS()Ljava/lang/String; -> java.io.PrintStream.println(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.computeConfigurationLocationForMacOS()Ljava/lang/String; -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.computeConfigurationLocationForMacOS()Ljava/lang/String; -> org.eclipse.equinox.launcher.JNIBridge.getOSRecommendedFolder()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.computeDefaultConfigurationLocation()Ljava/lang/String; -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.computeDefaultConfigurationLocation()Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.canWrite(Ljava/io/File;)Z
org.eclipse.equinox.launcher.Main.computeDefaultConfigurationLocation()Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.computeDefaultUserAreaLocation(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.computeDefaultConfigurationLocation()Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.computeDefaultUserAreaLocation(Ljava/lang/String;)Ljava/lang/String; -> java.io.File.exists()Z
org.eclipse.equinox.launcher.Main.computeDefaultUserAreaLocation(Ljava/lang/String;)Ljava/lang/String; -> java.io.FileInputStream.<init>(Ljava/io/File;)V
org.eclipse.equinox.launcher.Main.computeDefaultUserAreaLocation(Ljava/lang/String;)Ljava/lang/String; -> java.io.PrintStream.println(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.computeDefaultUserAreaLocation(Ljava/lang/String;)Ljava/lang/String; -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.computeDefaultUserAreaLocation(Ljava/lang/String;)Ljava/lang/String; -> java.util.Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.computeDefaultUserAreaLocation(Ljava/lang/String;)Ljava/lang/String; -> java.util.Properties.load(Ljava/io/InputStream;)V
org.eclipse.equinox.launcher.Main.computeDefaultUserAreaLocation(Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.OS_WS_ARCHToString()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.computeDefaultUserAreaLocation(Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.computeConfigurationLocationForMacOS()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.computeDefaultUserAreaLocation(Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getInstallDirHash()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.computeDefaultUserAreaLocation(Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.computeDefaultUserAreaLocation(Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.initializeBridgeEarly()V
org.eclipse.equinox.launcher.Main.computeLogFileLocation()V -> java.io.File.mkdirs()Z
org.eclipse.equinox.launcher.Main.computeLogFileLocation()V -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.computeLogFileLocation()V -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.computeLogFileLocation()V -> org.eclipse.equinox.launcher.Main.buildURL(Ljava/lang/String;Z)Ljava/net/URL;
org.eclipse.equinox.launcher.Main.constructURL(Ljava/net/URL;Ljava/lang/String;)Ljava/net/URL; -> java.lang.StringBuffer.append(Ljava/lang/Object;)Ljava/lang/StringBuffer;
org.eclipse.equinox.launcher.Main.constructURL(Ljava/net/URL;Ljava/lang/String;)Ljava/net/URL; -> java.net.URL.<init>(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.constructURL(Ljava/net/URL;Ljava/lang/String;)Ljava/net/URL; -> java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.decode(Ljava/lang/String;)Ljava/lang/String; -> java.lang.String.<init>([BII)V
org.eclipse.equinox.launcher.Main.decode(Ljava/lang/String;)Ljava/lang/String; -> java.lang.String.<init>([BIILjava/lang/String;)V
org.eclipse.equinox.launcher.Main.decode(Ljava/lang/String;)Ljava/lang/String; -> java.lang.String.getBytes()[B
org.eclipse.equinox.launcher.Main.decode(Ljava/lang/String;)Ljava/lang/String; -> java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
org.eclipse.equinox.launcher.Main.decode(Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.hexToByte(B)I
org.eclipse.equinox.launcher.Main.ensureAbsolute(Ljava/lang/String;)V -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.ensureAbsolute(Ljava/lang/String;)V -> java.net.URL.<init>(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.ensureAbsolute(Ljava/lang/String;)V -> java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.ensureAbsolute(Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.extractFromJAR(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.io.File.delete()Z
org.eclipse.equinox.launcher.Main.extractFromJAR(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.io.File.exists()Z
org.eclipse.equinox.launcher.Main.extractFromJAR(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.io.File.mkdirs()Z
org.eclipse.equinox.launcher.Main.extractFromJAR(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.io.FileOutputStream.<init>(Ljava/io/File;)V
org.eclipse.equinox.launcher.Main.extractFromJAR(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.util.zip.ZipFile.<init>(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.extractFromJAR(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.util.zip.ZipFile.getEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry;
org.eclipse.equinox.launcher.Main.extractFromJAR(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.buildURL(Ljava/lang/String;Z)Ljava/net/URL;
org.eclipse.equinox.launcher.Main.extractFromJAR(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.log(Ljava/lang/Object;)V
org.eclipse.equinox.launcher.Main.extractFromJAR(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.transferStreams(Ljava/io/InputStream;Ljava/io/OutputStream;)V
org.eclipse.equinox.launcher.Main.findMax(Ljava/lang/String;[Ljava/lang/String;)I -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.findMax(Ljava/lang/String;[Ljava/lang/String;)I -> org.eclipse.equinox.launcher.Main.compareVersion([Ljava/lang/Object;[Ljava/lang/Object;)I
org.eclipse.equinox.launcher.Main.findMax(Ljava/lang/String;[Ljava/lang/String;)I -> org.eclipse.equinox.launcher.Main.getVersionElements(Ljava/lang/String;)[Ljava/lang/Object;
org.eclipse.equinox.launcher.Main.getArch()Ljava/lang/String; -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.getBootPath(Ljava/lang/String;)[Ljava/net/URL; -> java.io.File.toURL()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.getBootPath(Ljava/lang/String;)[Ljava/net/URL; -> java.io.PrintStream.println(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.getBootPath(Ljava/lang/String;)[Ljava/net/URL; -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.getBootPath(Ljava/lang/String;)[Ljava/net/URL; -> java.net.URL.<init>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
org.eclipse.equinox.launcher.Main.getBootPath(Ljava/lang/String;)[Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.buildURL(Ljava/lang/String;Z)Ljava/net/URL;
org.eclipse.equinox.launcher.Main.getBootPath(Ljava/lang/String;)[Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.getDevPath(Ljava/net/URL;)[Ljava/net/URL;
org.eclipse.equinox.launcher.Main.getBootPath(Ljava/lang/String;)[Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.getBootPath(Ljava/lang/String;)[Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getConfigurationLocation()Ljava/net/URL; -> java.io.PrintStream.println(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.getConfigurationLocation()Ljava/net/URL; -> java.lang.StringBuffer.append(Ljava/lang/Object;)Ljava/lang/StringBuffer;
org.eclipse.equinox.launcher.Main.getConfigurationLocation()Ljava/net/URL; -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.getConfigurationLocation()Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.buildLocation(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;)Ljava/net/URL;
org.eclipse.equinox.launcher.Main.getConfigurationLocation()Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.buildURL(Ljava/lang/String;Z)Ljava/net/URL;
org.eclipse.equinox.launcher.Main.getConfigurationLocation()Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.computeDefaultConfigurationLocation()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getCurrentConfigIniBaseTimestamp(Ljava/net/URL;)J -> java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.getDate(Ljava/util/Date;)Ljava/lang/String; -> java.util.Calendar.get(I)I
org.eclipse.equinox.launcher.Main.getDate(Ljava/util/Date;)Ljava/lang/String; -> java.util.Calendar.getInstance()Ljava/util/Calendar;
org.eclipse.equinox.launcher.Main.getDate(Ljava/util/Date;)Ljava/lang/String; -> java.util.Calendar.setTime(Ljava/util/Date;)V
org.eclipse.equinox.launcher.Main.getDate(Ljava/util/Date;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.appendPaddedInt(IILjava/lang/StringBuffer;)Ljava/lang/StringBuffer;
org.eclipse.equinox.launcher.Main.getDevPath(Ljava/net/URL;)[Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.addBaseJars(Ljava/net/URL;Ljava/util/ArrayList;)V
org.eclipse.equinox.launcher.Main.getDevPath(Ljava/net/URL;)[Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.addDevEntries(Ljava/net/URL;Ljava/util/List;Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.getInstallDirHash()Ljava/lang/String; -> java.io.File.getCanonicalPath()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getInstallDirHash()Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL; -> java.io.File.toURL()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL; -> java.io.PrintStream.println(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL; -> java.lang.Class.getProtectionDomain()Ljava/security/ProtectionDomain;
org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL; -> java.lang.String.toLowerCase()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL; -> java.lang.StringBuffer.append(Ljava/lang/Object;)Ljava/lang/StringBuffer;
org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL; -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL; -> java.net.URL.<init>(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL; -> java.net.URL.<init>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.buildURL(Ljava/lang/String;Z)Ljava/net/URL;
org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL; -> org.eclipse.equinox.launcher.Main.decode(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getLastKnownConfigIniBaseTimestamp()J -> java.io.PrintStream.println(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.getLastKnownConfigIniBaseTimestamp()J -> java.lang.StringBuffer.append(Ljava/lang/Object;)Ljava/lang/StringBuffer;
org.eclipse.equinox.launcher.Main.getLastKnownConfigIniBaseTimestamp()J -> java.util.Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getLastKnownConfigIniBaseTimestamp()J -> org.eclipse.equinox.launcher.Main.getConfigurationLocation()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.getLastKnownConfigIniBaseTimestamp()J -> org.eclipse.equinox.launcher.Main.load(Ljava/net/URL;Ljava/lang/String;)Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.getLibraryFromFragment(Ljava/lang/String;)Ljava/lang/String; -> java.io.File.exists()Z
org.eclipse.equinox.launcher.Main.getLibraryFromFragment(Ljava/lang/String;)Ljava/lang/String; -> java.io.File.isDirectory()Z
org.eclipse.equinox.launcher.Main.getLibraryFromFragment(Ljava/lang/String;)Ljava/lang/String; -> java.lang.Runtime.exec([Ljava/lang/String;)Ljava/lang/Process;
org.eclipse.equinox.launcher.Main.getLibraryFromFragment(Ljava/lang/String;)Ljava/lang/String; -> java.util.zip.ZipFile$ZipEntryIterator.nextElement()Ljava/lang/Object;
org.eclipse.equinox.launcher.Main.getLibraryFromFragment(Ljava/lang/String;)Ljava/lang/String; -> java.util.zip.ZipFile.<init>(Ljava/io/File;)V
org.eclipse.equinox.launcher.Main.getLibraryFromFragment(Ljava/lang/String;)Ljava/lang/String; -> java.util.zip.ZipFile.close()V
org.eclipse.equinox.launcher.Main.getLibraryFromFragment(Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.extractFromJAR(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getLibraryFromFragment(Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getOS()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getLibraryFromFragment(Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.log(Ljava/lang/Object;)V
org.eclipse.equinox.launcher.Main.getLibraryFromFragment(Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getLibraryPath(Ljava/lang/String;[Ljava/net/URL;)Ljava/lang/String; -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getLibraryPath(Ljava/lang/String;[Ljava/net/URL;)Ljava/lang/String; -> java.util.Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getLibraryPath(Ljava/lang/String;[Ljava/net/URL;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getArrayFromList(Ljava/lang/String;)[Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getLibraryPath(Ljava/lang/String;[Ljava/net/URL;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.getLibraryPath(Ljava/lang/String;[Ljava/net/URL;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getLibraryFromFragment(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getLibraryPath(Ljava/lang/String;[Ljava/net/URL;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getOS()Ljava/lang/String; -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.getSplashLocation([Ljava/net/URL;)Ljava/lang/String; -> java.io.File.exists()Z
org.eclipse.equinox.launcher.Main.getSplashLocation([Ljava/net/URL;)Ljava/lang/String; -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.getSplashLocation([Ljava/net/URL;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getArrayFromList(Ljava/lang/String;)[Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getSplashLocation([Ljava/net/URL;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.log(Ljava/lang/Object;)V
org.eclipse.equinox.launcher.Main.getSplashLocation([Ljava/net/URL;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.resolve(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getSplashLocation([Ljava/net/URL;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getSplashLocation([Ljava/net/URL;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.searchForSplash([Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.getWS()Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getOS()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.handleSplash([Ljava/net/URL;)V -> java.io.PrintStream.println(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.handleSplash([Ljava/net/URL;)V -> java.lang.Runtime.addShutdownHook(Ljava/lang/Thread;)V
org.eclipse.equinox.launcher.Main.handleSplash([Ljava/net/URL;)V -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.handleSplash([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.JNIBridge.getSplashHandle()J
org.eclipse.equinox.launcher.Main.handleSplash([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.JNIBridge.setLauncherInfo(Ljava/lang/String;Ljava/lang/String;)Z
org.eclipse.equinox.launcher.Main.handleSplash([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.JNIBridge.showSplash(Ljava/lang/String;)Z
org.eclipse.equinox.launcher.Main.handleSplash([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.JNIBridge.updateSplash()Z
org.eclipse.equinox.launcher.Main.handleSplash([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main.getSplashLocation([Ljava/net/URL;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.initializeBridgeEarly()V -> org.eclipse.equinox.launcher.Main.setupJNI([Ljava/net/URL;)V
org.eclipse.equinox.launcher.Main.invokeFramework([Ljava/lang/String;[Ljava/net/URL;)V -> java.lang.Class.getClassLoader()Ljava/lang/ClassLoader;
org.eclipse.equinox.launcher.Main.invokeFramework([Ljava/lang/String;[Ljava/net/URL;)V -> java.lang.Class.getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
org.eclipse.equinox.launcher.Main.invokeFramework([Ljava/lang/String;[Ljava/net/URL;)V -> java.lang.ClassLoader.getSystemClassLoader()Ljava/lang/ClassLoader;
org.eclipse.equinox.launcher.Main.invokeFramework([Ljava/lang/String;[Ljava/net/URL;)V -> java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;
org.eclipse.equinox.launcher.Main.invokeFramework([Ljava/lang/String;[Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main$Identifier.<init>(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.invokeFramework([Ljava/lang/String;[Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main$Identifier.isGreaterEqualTo(Lorg/eclipse/equinox/launcher/Main$Identifier;)Z
org.eclipse.equinox.launcher.Main.invokeFramework([Ljava/lang/String;[Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main$StartupClassLoader.<init>(Lorg/eclipse/equinox/launcher/Main;[Ljava/net/URL;Ljava/lang/ClassLoader;)V
org.eclipse.equinox.launcher.Main.isJAR(Ljava/lang/String;)Z -> java.io.File.isFile()Z
org.eclipse.equinox.launcher.Main.isMatchingCandidate(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Z -> java.io.File.isFile()Z
org.eclipse.equinox.launcher.Main.isMatchingCandidate(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Z -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.load(Ljava/net/URL;Ljava/lang/String;)Ljava/util/Properties; -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.load(Ljava/net/URL;Ljava/lang/String;)Ljava/util/Properties; -> java.net.URL.<init>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
org.eclipse.equinox.launcher.Main.load(Ljava/net/URL;Ljava/lang/String;)Ljava/util/Properties; -> java.util.Properties.load(Ljava/io/InputStream;)V
org.eclipse.equinox.launcher.Main.loadConfiguration(Ljava/net/URL;)Ljava/util/Properties; -> java.io.PrintStream.print(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.loadConfiguration(Ljava/net/URL;)Ljava/util/Properties; -> java.io.PrintStream.println(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.loadConfiguration(Ljava/net/URL;)Ljava/util/Properties; -> java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.loadConfiguration(Ljava/net/URL;)Ljava/util/Properties; -> org.eclipse.equinox.launcher.Main.loadProperties(Ljava/net/URL;)Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.loadConfiguration(Ljava/net/URL;)Ljava/util/Properties; -> org.eclipse.equinox.launcher.Main.substituteVars(Ljava/util/Properties;)Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.loadProperties(Ljava/net/URL;)Ljava/util/Properties; -> org.eclipse.equinox.launcher.Main.load(Ljava/net/URL;Ljava/lang/String;)Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.log(Ljava/lang/Object;)V -> java.io.PrintStream.println(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.log(Ljava/lang/Object;)V -> java.lang.Throwable.printStackTrace(Ljava/io/PrintStream;)V
org.eclipse.equinox.launcher.Main.log(Ljava/lang/Object;)V -> java.util.Date.toString()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.log(Ljava/lang/Object;)V -> org.eclipse.equinox.launcher.Main.closeLogFile()V
org.eclipse.equinox.launcher.Main.log(Ljava/lang/Object;)V -> org.eclipse.equinox.launcher.Main.logForStream(Ljava/io/OutputStream;)Ljava/io/BufferedWriter;
org.eclipse.equinox.launcher.Main.log(Ljava/lang/Object;)V -> org.eclipse.equinox.launcher.Main.openLogFile()V
org.eclipse.equinox.launcher.Main.log(Ljava/lang/Object;)V -> org.eclipse.equinox.launcher.Main.write(Ljava/lang/Object;)V
org.eclipse.equinox.launcher.Main.logForStream(Ljava/io/OutputStream;)Ljava/io/BufferedWriter; -> java.io.BufferedWriter.<init>(Ljava/io/Writer;)V
org.eclipse.equinox.launcher.Main.main([Ljava/lang/String;)V -> java.lang.System.exit(I)V
org.eclipse.equinox.launcher.Main.main([Ljava/lang/String;)V -> java.lang.Throwable.printStackTrace()V
org.eclipse.equinox.launcher.Main.main([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.<init>()V
org.eclipse.equinox.launcher.Main.main([Ljava/lang/String;)V -> org.eclipse.equinox.launcher.Main.run([Ljava/lang/String;)I
org.eclipse.equinox.launcher.Main.mergeProperties(Ljava/util/Properties;Ljava/util/Properties;Ljava/util/Properties;)V -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.mergeProperties(Ljava/util/Properties;Ljava/util/Properties;Ljava/util/Properties;)V -> java.util.Hashtable.contains(Ljava/lang/Object;)Z
org.eclipse.equinox.launcher.Main.mergeProperties(Ljava/util/Properties;Ljava/util/Properties;Ljava/util/Properties;)V -> java.util.Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.openLogFile()V -> java.io.BufferedWriter.<init>(Ljava/io/Writer;)V
org.eclipse.equinox.launcher.Main.openLogFile()V -> java.io.FileOutputStream.<init>(Ljava/lang/String;Z)V
org.eclipse.equinox.launcher.Main.openLogFile()V -> org.eclipse.equinox.launcher.Main.computeLogFileLocation()V
org.eclipse.equinox.launcher.Main.processCommandLine([Ljava/lang/String;)[Ljava/lang/String; -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.processCommandLine([Ljava/lang/String;)[Ljava/lang/String; -> java.util.Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.processCommandLine([Ljava/lang/String;)[Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.processDevArg(Ljava/lang/String;)Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.processConfiguration()V -> java.io.PrintStream.println(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.processConfiguration()V -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.processConfiguration()V -> java.lang.System.setProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.processConfiguration()V -> java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.processConfiguration()V -> java.util.Hashtable.remove(Ljava/lang/Object;)Ljava/lang/Object;
org.eclipse.equinox.launcher.Main.processConfiguration()V -> java.util.Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.processConfiguration()V -> org.eclipse.equinox.launcher.Main.buildLocation(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;)Ljava/net/URL;
org.eclipse.equinox.launcher.Main.processConfiguration()V -> org.eclipse.equinox.launcher.Main.buildURL(Ljava/lang/String;Z)Ljava/net/URL;
org.eclipse.equinox.launcher.Main.processConfiguration()V -> org.eclipse.equinox.launcher.Main.ensureAbsolute(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.processConfiguration()V -> org.eclipse.equinox.launcher.Main.getConfigurationLocation()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.processConfiguration()V -> org.eclipse.equinox.launcher.Main.getCurrentConfigIniBaseTimestamp(Ljava/net/URL;)J
org.eclipse.equinox.launcher.Main.processConfiguration()V -> org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.processConfiguration()V -> org.eclipse.equinox.launcher.Main.getLastKnownConfigIniBaseTimestamp()J
org.eclipse.equinox.launcher.Main.processConfiguration()V -> org.eclipse.equinox.launcher.Main.loadConfiguration(Ljava/net/URL;)Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.processConfiguration()V -> org.eclipse.equinox.launcher.Main.mergeProperties(Ljava/util/Properties;Ljava/util/Properties;Ljava/util/Properties;)V
org.eclipse.equinox.launcher.Main.processConfiguration()V -> org.eclipse.equinox.launcher.Main.resolve(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.processDevArg(Ljava/lang/String;)Ljava/util/Properties; -> java.net.URL.<init>(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.processDevArg(Ljava/lang/String;)Ljava/util/Properties; -> java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
org.eclipse.equinox.launcher.Main.processDevArg(Ljava/lang/String;)Ljava/util/Properties; -> org.eclipse.equinox.launcher.Main.load(Ljava/net/URL;Ljava/lang/String;)Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> java.io.File.toURL()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> java.io.PrintStream.println(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> java.net.URL.<init>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> java.util.Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> org.eclipse.equinox.launcher.Main.addDevEntries(Ljava/net/URL;Ljava/util/List;Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> org.eclipse.equinox.launcher.Main.constructURL(Ljava/net/URL;Ljava/lang/String;)Ljava/net/URL;
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> org.eclipse.equinox.launcher.Main.getArrayFromList(Ljava/lang/String;)[Ljava/lang/String;
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> org.eclipse.equinox.launcher.Main.loadProperties(Ljava/net/URL;)Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> org.eclipse.equinox.launcher.Main.log(Ljava/lang/Object;)V
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> org.eclipse.equinox.launcher.Main.mergeProperties(Ljava/util/Properties;Ljava/util/Properties;Ljava/util/Properties;)V
org.eclipse.equinox.launcher.Main.readFrameworkExtensions(Ljava/net/URL;Ljava/util/ArrayList;)V -> org.eclipse.equinox.launcher.Main.searchForBundle(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.resolve(Ljava/lang/String;)Ljava/lang/String; -> java.lang.StringBuffer.append(Ljava/lang/Object;)Ljava/lang/StringBuffer;
org.eclipse.equinox.launcher.Main.resolve(Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.getInstallLocation()Ljava/net/URL;
org.eclipse.equinox.launcher.Main.resolveFile(Ljava/io/File;)Ljava/io/File; -> java.io.File.exists()Z
org.eclipse.equinox.launcher.Main.resolveFile(Ljava/io/File;)Ljava/io/File; -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.run([Ljava/lang/String;)I -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.run([Ljava/lang/String;)I -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.run([Ljava/lang/String;)I -> org.eclipse.equinox.launcher.JNIBridge.uninitialize()Z
org.eclipse.equinox.launcher.Main.run([Ljava/lang/String;)I -> org.eclipse.equinox.launcher.Main.basicRun([Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.run([Ljava/lang/String;)I -> org.eclipse.equinox.launcher.Main.log(Ljava/lang/Object;)V
org.eclipse.equinox.launcher.Main.run([Ljava/lang/String;)I -> org.eclipse.equinox.launcher.Main.setExitData()V
org.eclipse.equinox.launcher.Main.run([Ljava/lang/String;)I -> org.eclipse.equinox.launcher.Main.takeDownSplash()V
org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.io.File.isDirectory()Z
org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.io.File.list()[Ljava/lang/String;
org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.findMax(Ljava/lang/String;[Ljava/lang/String;)I
org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.isMatchingCandidate(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Z
org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.resolveFile(Ljava/io/File;)Ljava/io/File;
org.eclipse.equinox.launcher.Main.searchForBundle(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.resolveFile(Ljava/io/File;)Ljava/io/File;
org.eclipse.equinox.launcher.Main.searchForBundle(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.searchForSplash([Ljava/lang/String;)Ljava/lang/String; -> java.io.File.exists()Z
org.eclipse.equinox.launcher.Main.searchForSplash([Ljava/lang/String;)Ljava/lang/String; -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.searchForSplash([Ljava/lang/String;)Ljava/lang/String; -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.searchForSplash([Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.buildNLVariants(Ljava/lang/String;)[Ljava/lang/String;
org.eclipse.equinox.launcher.Main.searchForSplash([Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.extractFromJAR(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.searchForSplash([Ljava/lang/String;)Ljava/lang/String; -> org.eclipse.equinox.launcher.Main.isJAR(Ljava/lang/String;)Z
org.eclipse.equinox.launcher.Main.setExitData()V -> java.io.PrintStream.println(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.setExitData()V -> org.eclipse.equinox.launcher.JNIBridge.isLibraryLoadedByJava()Z
org.eclipse.equinox.launcher.Main.setExitData()V -> org.eclipse.equinox.launcher.JNIBridge.setExitData(Ljava/lang/String;Ljava/lang/String;)Z
org.eclipse.equinox.launcher.Main.setMultiValueProperty(Ljava/lang/String;[Ljava/lang/String;)V -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.setSecurityPolicy([Ljava/net/URL;)V -> java.lang.Class.getProtectionDomain()Ljava/security/ProtectionDomain;
org.eclipse.equinox.launcher.Main.setSecurityPolicy([Ljava/net/URL;)V -> java.security.Policy.getPolicy()Ljava/security/Policy;
org.eclipse.equinox.launcher.Main.setSecurityPolicy([Ljava/net/URL;)V -> java.security.Policy.setPolicy(Ljava/security/Policy;)V
org.eclipse.equinox.launcher.Main.setSecurityPolicy([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main$EclipsePolicy.<init>(Lorg/eclipse/equinox/launcher/Main;Ljava/security/Policy;[Ljava/net/URL;)V
org.eclipse.equinox.launcher.Main.setSecurityPolicy([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main.log(Ljava/lang/Object;)V
org.eclipse.equinox.launcher.Main.setupJNI([Ljava/net/URL;)V -> java.io.File.exists()Z
org.eclipse.equinox.launcher.Main.setupJNI([Ljava/net/URL;)V -> java.io.File.isDirectory()Z
org.eclipse.equinox.launcher.Main.setupJNI([Ljava/net/URL;)V -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.setupJNI([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.JNIBridge.<init>(Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.setupJNI([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main.getAlternateWS(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.setupJNI([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main.getArch()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.setupJNI([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main.getFragmentString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.setupJNI([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main.getLibraryPath(Ljava/lang/String;[Ljava/net/URL;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.setupJNI([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main.getOS()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.setupJNI([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main.getWS()Ljava/lang/String;
org.eclipse.equinox.launcher.Main.setupJNI([Ljava/net/URL;)V -> org.eclipse.equinox.launcher.Main.searchFor(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.setupVMProperties()V -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.setupVMProperties()V -> org.eclipse.equinox.launcher.Main.setMultiValueProperty(Ljava/lang/String;[Ljava/lang/String;)V
org.eclipse.equinox.launcher.Main.substituteVar(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.substituteVars(Ljava/lang/String;)Ljava/lang/String; -> java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
org.eclipse.equinox.launcher.Main.substituteVars(Ljava/util/Properties;)Ljava/util/Properties; -> java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
org.eclipse.equinox.launcher.Main.substituteVars(Ljava/util/Properties;)Ljava/util/Properties; -> java.util.Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.substituteVars(Ljava/util/Properties;)Ljava/util/Properties; -> org.eclipse.equinox.launcher.Main.substituteVars(Ljava/lang/String;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.takeDownSplash()V -> java.lang.Runtime.removeShutdownHook(Ljava/lang/Thread;)Z
org.eclipse.equinox.launcher.Main.takeDownSplash()V -> java.lang.System.getProperties()Ljava/util/Properties;
org.eclipse.equinox.launcher.Main.takeDownSplash()V -> org.eclipse.equinox.launcher.JNIBridge.takeDownSplash()Z
org.eclipse.equinox.launcher.Main.transferStreams(Ljava/io/InputStream;Ljava/io/OutputStream;)V -> java.io.FilterInputStream.read([B)I
org.eclipse.equinox.launcher.Main.transferStreams(Ljava/io/InputStream;Ljava/io/OutputStream;)V -> java.io.InputStream.read([B)I
org.eclipse.equinox.launcher.Main.write(Ljava/lang/Object;)V -> java.io.PrintWriter.<init>(Ljava/io/Writer;)V
org.eclipse.equinox.launcher.Main.write(Ljava/lang/Object;)V -> java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
org.eclipse.equinox.launcher.Main.write(Ljava/lang/Object;)V -> java.lang.Throwable.printStackTrace(Ljava/io/PrintWriter;)V
org.eclipse.equinox.launcher.Main.write(Ljava/lang/Object;)V -> org.eclipse.equinox.launcher.Main.getDate(Ljava/util/Date;)Ljava/lang/String;
